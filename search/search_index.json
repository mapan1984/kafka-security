{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kafka \u8ba4\u8bc1\u4e0e\u9274\u6743 Kafka \u4f5c\u4e3a\u6570\u636e\u670d\u52a1\uff0c\u9700\u8981\u8003\u8651\u4ee5\u4e0b 3 \u4e2a\u95ee\u9898\uff1a \u7528\u6237\u8ba4\u8bc1 \uff1a\u54ea\u4e9b\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5 Kafka \u670d\u52a1 \u6743\u9650\u63a7\u5236 \uff1a\u5ba2\u6237\u7aef\u8fde\u63a5 Kafka \u670d\u52a1\u4e4b\u540e\uff0c\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9b\u8d44\u6e90\uff08topic, consumer \u7b49\uff09\uff0c\u505a\u4ec0\u4e48\u64cd\u4f5c \u4f20\u8f93\u52a0\u5bc6 \uff1a\u5ba2\u6237\u7aef\u4e0e Kafka \u670d\u52a1\u4ea4\u4e92\u7684\u6570\u636e\u662f\u5426\u4f1a\u88ab\u7b2c\u4e09\u65b9\u62e6\u622a\u7a83\u542c Kafka \u5bf9\u8fd9 3 \u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u5f0f\u4e3a\uff1a \u7528\u6237\u8ba4\u8bc1 Authentication(SSL or SASL)\uff1a\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u65f6\uff0c\u63d0\u4f9b\u81ea\u8eab\u8eab\u4efd\u4fe1\u606f\uff0c\u670d\u52a1\u7aef\u9a8c\u8bc1\u901a\u8fc7\u540e\u624d\u51c6\u8bb8\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\u652f\u6301\u7684\u8ba4\u8bc1\u65b9\u5f0f\u6709\uff1a SSL: \u5ba2\u6237\u7aef\u63d0\u4f9b\u81ea\u8eab SSL \u8bc1\u4e66\uff0c\u670d\u52a1\u7aef\u9a8c\u8bc1\u8bc1\u4e66\u5e76\u4ece\u8bc1\u4e66\u4e2d\u63d0\u53d6\u8eab\u4efd\u4fe1\u606f\u3002 SASL (SASL_PLAINTEXT or SASL_SSL): SASL \u662f\u4e00\u79cd\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u7684\u8ba4\u8bc1\u673a\u5236\u89c4\u8303\uff0c\u5168\u79f0 Simple Authentication and Security Layer\u3002kafka \u652f\u6301\u4ee5\u4e0b SASL \u673a\u5236\uff1a GSSAPI (Kerberos) - \u4ece 0.9.0.0 \u7248\u672c\u5f00\u59cb PLAIN - \u4ece 0.10.0.0 \u7248\u672c\u5f00\u59cb: clients authenticate using username/pssword SCRAM-SHA-256/SCRAM-SHA-512 - \u4ece 0.10.2.0 \u7248\u672c\u5f00\u59cb OAUTHBEARER - \u4ece 2.0 \u7248\u672c\u5f00\u59cb \u6743\u9650\u63a7\u5236 Authorisation(ACL)\uff1a\u53ef\u4ee5\u8bbe\u7f6e\u89c4\u5219\uff0c\u5141\u8bb8\u6216\u8005\u7981\u6b62\u54ea\u4e9b\u7528\u6237\u53ef\u4ee5\u5bf9\u54ea\u4e9b\u8d44\u6e90\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c \u4f20\u8f93\u52a0\u5bc6 Encryption(SSL)","title":"0. kafka \u8ba4\u8bc1\uff0c\u9274\u6743\uff0c\u52a0\u5bc6"},{"location":"#kafka","text":"Kafka \u4f5c\u4e3a\u6570\u636e\u670d\u52a1\uff0c\u9700\u8981\u8003\u8651\u4ee5\u4e0b 3 \u4e2a\u95ee\u9898\uff1a \u7528\u6237\u8ba4\u8bc1 \uff1a\u54ea\u4e9b\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5 Kafka \u670d\u52a1 \u6743\u9650\u63a7\u5236 \uff1a\u5ba2\u6237\u7aef\u8fde\u63a5 Kafka \u670d\u52a1\u4e4b\u540e\uff0c\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9b\u8d44\u6e90\uff08topic, consumer \u7b49\uff09\uff0c\u505a\u4ec0\u4e48\u64cd\u4f5c \u4f20\u8f93\u52a0\u5bc6 \uff1a\u5ba2\u6237\u7aef\u4e0e Kafka \u670d\u52a1\u4ea4\u4e92\u7684\u6570\u636e\u662f\u5426\u4f1a\u88ab\u7b2c\u4e09\u65b9\u62e6\u622a\u7a83\u542c Kafka \u5bf9\u8fd9 3 \u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u5f0f\u4e3a\uff1a \u7528\u6237\u8ba4\u8bc1 Authentication(SSL or SASL)\uff1a\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u65f6\uff0c\u63d0\u4f9b\u81ea\u8eab\u8eab\u4efd\u4fe1\u606f\uff0c\u670d\u52a1\u7aef\u9a8c\u8bc1\u901a\u8fc7\u540e\u624d\u51c6\u8bb8\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\u652f\u6301\u7684\u8ba4\u8bc1\u65b9\u5f0f\u6709\uff1a SSL: \u5ba2\u6237\u7aef\u63d0\u4f9b\u81ea\u8eab SSL \u8bc1\u4e66\uff0c\u670d\u52a1\u7aef\u9a8c\u8bc1\u8bc1\u4e66\u5e76\u4ece\u8bc1\u4e66\u4e2d\u63d0\u53d6\u8eab\u4efd\u4fe1\u606f\u3002 SASL (SASL_PLAINTEXT or SASL_SSL): SASL \u662f\u4e00\u79cd\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u7684\u8ba4\u8bc1\u673a\u5236\u89c4\u8303\uff0c\u5168\u79f0 Simple Authentication and Security Layer\u3002kafka \u652f\u6301\u4ee5\u4e0b SASL \u673a\u5236\uff1a GSSAPI (Kerberos) - \u4ece 0.9.0.0 \u7248\u672c\u5f00\u59cb PLAIN - \u4ece 0.10.0.0 \u7248\u672c\u5f00\u59cb: clients authenticate using username/pssword SCRAM-SHA-256/SCRAM-SHA-512 - \u4ece 0.10.2.0 \u7248\u672c\u5f00\u59cb OAUTHBEARER - \u4ece 2.0 \u7248\u672c\u5f00\u59cb \u6743\u9650\u63a7\u5236 Authorisation(ACL)\uff1a\u53ef\u4ee5\u8bbe\u7f6e\u89c4\u5219\uff0c\u5141\u8bb8\u6216\u8005\u7981\u6b62\u54ea\u4e9b\u7528\u6237\u53ef\u4ee5\u5bf9\u54ea\u4e9b\u8d44\u6e90\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c \u4f20\u8f93\u52a0\u5bc6 Encryption(SSL)","title":"kafka \u8ba4\u8bc1\u4e0e\u9274\u6743"},{"location":"1-security%20protocol%20%E6%A6%82%E8%A7%88/","text":"1 Security Protocol \u6982\u89c8 \u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0c\u662f\u5426\u9700\u8981\u8ba4\u8bc1\u4ee5\u53ca\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u8ba4\u8bc1\uff0c\u662f\u5426\u8fdb\u884c\u52a0\u5bc6\uff0c\u7531\u8fde\u63a5\u65f6\u4f7f\u7528\u7684 security protocol \u51b3\u5b9a\u3002 Kafka \u63d0\u4f9b\u4e86 4 \u79cd security protocol \u4f9b\u9009\u62e9\uff0c\u53ef\u4ee5\u540c\u65f6\u914d\u7f6e\u591a\u4e2a listeners\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u534f\u8bae\u63a5\u5165\u3002 PLAINTEXT SSL SASL_PLAINTEXT SASL_SSL security.protocol \u7528\u6237\u8ba4\u8bc1 \u4f20\u8f93\u52a0\u5bc6 PLAINTEXT \u4e0d\u9700\u8981\u8fdb\u884c\u8ba4\u8bc1 x SSL \u53ef\u4ee5\u5f00\u542f\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bc1\u4e66 \u221a SASL_PLAINTEXT \u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u7528\u6237\u4fe1\u606f x SASL_SSL \u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u7528\u6237\u4fe1\u606f \u221a \u662f\u5426\u5f00\u542f\u6743\u9650\u63a7\u5236\u4e0d\u7531 security protocol \u51b3\u5b9a\uff0c\u4f46\u662f\u6743\u9650\u63a7\u5236\u9700\u8981\u8bc6\u522b\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u7528\u6237\u8eab\u4efd\uff0c\u53ea\u6709\u5728\u8fde\u63a5\u7ecf\u8fc7\u7528\u6237\u8ba4\u8bc1\u540e\u624d\u6709\u610f\u4e49 security.protocol \u6743\u9650\u63a7\u5236 PLAINTEXT \u8fde\u63a5\u65e0\u7528\u6237\u8eab\u4efd\uff0c\u89c6\u4e3a\u533f\u540d\u7528\u6237 ANONYMOUS SSL \u5982\u679c\u5f00\u542f\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u5219\u4ece\u5ba2\u6237\u7aef\u8bc1\u4e66\u63d0\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u53ef\u4ee5\u652f\u6301\u5f00\u542f\u6743\u9650\u63a7\u5236 SASL_PLAINTEXT \u53ef\u4ee5\u652f\u6301\u5f00\u542f\u6743\u9650\u63a7\u5236 SASL_SSL \u53ef\u4ee5\u652f\u6301\u5f00\u542f\u6743\u9650\u63a7\u5236 PLAINTEXT \u4e0d\u9700\u8981\u7528\u6237\u8ba4\u8bc1\uff0c\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u8fde\u63a5\u670d\u52a1 \u4f20\u8f93\u6570\u636e\u4e0d\u52a0\u5bc6 \u8fde\u63a5\u4e0d\u643a\u5e26\u7528\u6237\u8eab\u4efd\uff0c\u89c6\u4e3a\u533f\u540d\u7528\u6237\uff08 KafkaPrincipal.ANONYMOUS \uff09\uff0c\u53ef\u4ee5\u521b\u5efa\u7528\u6237\u540d\u4e3a ANONYMOUS \u7684\u7528\u6237\u5e76\u7ed1\u5b9a\u6743\u9650 Broker-side Client-side listeners=PLAINTEXT://127.0.0.1:6667 SSL client \u4e0e broker \u5efa\u7acb SSL \u8fde\u63a5\uff0c\u4f20\u8f93\u52a0\u5bc6\u7684\u6570\u636e\uff1a \u6bcf\u4e2a broker \u9700\u63d0\u4f9b\u8bc1\u4e66(keystore \u6587\u4ef6) client \u9700\u8981\u4e00\u4e2a truststore \u6587\u4ef6\uff0c\u8be5 truststore \u6587\u4ef6\u5305\u542b\u53ef\u4fe1 ca \u8bc1\u4e66\uff0c\u8fd9\u91cc\u7684 ca \u5c31\u662f\u7b7e\u53d1 broker \u8bc1\u4e66\u7684 ca \u53e6\u5916\uff0c\u5982\u679c broker \u60f3\u8981\u901a\u8fc7 SSL \u8ba4\u8bc1 client\uff0c\u5219\u9664\u4e0a\u8ff0\u8981\u6c42\uff0c\u8fd8\u9700\uff1a broker \u9700\u8981\u4e00\u4e2a truststore \u6587\u4ef6\uff0c\u8be5 truststore \u6587\u4ef6\u5305\u542b\u53ef\u4fe1 ca \u8bc1\u4e66\uff0c\u8fd9\u91cc\u7684 ca \u5c31\u662f\u7b7e\u53d1 client \u8bc1\u4e66\u7684 ca client \u9700\u8981\u63d0\u4f9b\u8bc1\u4e66(keystore \u6587\u4ef6) \u8fd9\u91cc\u7684\u8ba4\u8bc1\u662f\u6307\uff1aclient \u6301\u6709\u8bc1\u4e66\u662f broker \u4fe1\u4efb\u7684 ca \u7b7e\u53d1\u7684 \u5982\u679c\u9700\u8981\u5bf9 client \u8fde\u63a5\u8bbe\u7f6e acl \u89c4\u5219\uff0c\u5219\u9700\u8981\u4ece\u8bc1\u4e66\u4e2d\u63d0\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u4e00\u822c\u7528\u8bc1\u4e66\u7684 CN \u6216\u8005 SAN \u4fe1\u606f Broker-side Client-side listeners=SSL://127.0.0.1:6667 inter.broker.protocol=SSL security.protocol=SSL SASL_PLAINTEXT client \u4e0e broker \u4e4b\u95f4\u901a\u8fc7 SASL \u673a\u5236\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4f20\u8f93\u5185\u5bb9\u4e0d\u52a0\u5bc6\uff0c\u53ef\u4ee5\u4e3a\u8ba4\u8bc1\u7528\u6237\u8bbe\u7f6e acl \u6743\u9650 Broker-side Client-side listeners=SASL_PLAINTEXT://127.0.0.1:6667 inter.broker.protocol=SASL_PLAINTEXT security.protocol=SASL_PLAINTEXT sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512 sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512 SASL_SSL client \u4e0e broker \u4e4b\u95f4\u901a\u8fc7 SASL \u673a\u5236\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4f20\u8f93\u5185\u5bb9\u901a\u8fc7 SSL \u52a0\u5bc6\uff0c\u53ef\u4ee5\u4e3a\u8ba4\u8bc1\u7528\u6237\u8bbe\u7f6e acl \u6743\u9650 \u56e0\u4e3a\u9700\u8981\u4f7f\u7528 SSL \u52a0\u5bc6\uff0c\u9700\u8981\u5728 broker \u914d\u7f6e SSL \u8bc1\u4e66\uff0cclient \u662f\u5426\u643a\u5e26\u8bc1\u4e66\u4e0d\u662f\u5fc5\u987b\u7684\u3002 2.8.0 \u4e4b\u540e\uff0cSASL_SSL \u53ef\u4ee5\u540c\u65f6\u5f00\u542f client \u8bc1\u4e66\u8ba4\u8bc1(KIP-684) Broker-side Client-side listeners=SASL_SSL://127.0.0.1:6667 inter.broker.protocol=SASL_SSL security.protocol=SASL_SSL sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512 sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512","title":"1. Security Protocol \u6982\u89c8"},{"location":"1-security%20protocol%20%E6%A6%82%E8%A7%88/#1-security-protocol","text":"\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0c\u662f\u5426\u9700\u8981\u8ba4\u8bc1\u4ee5\u53ca\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u8ba4\u8bc1\uff0c\u662f\u5426\u8fdb\u884c\u52a0\u5bc6\uff0c\u7531\u8fde\u63a5\u65f6\u4f7f\u7528\u7684 security protocol \u51b3\u5b9a\u3002 Kafka \u63d0\u4f9b\u4e86 4 \u79cd security protocol \u4f9b\u9009\u62e9\uff0c\u53ef\u4ee5\u540c\u65f6\u914d\u7f6e\u591a\u4e2a listeners\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u534f\u8bae\u63a5\u5165\u3002 PLAINTEXT SSL SASL_PLAINTEXT SASL_SSL security.protocol \u7528\u6237\u8ba4\u8bc1 \u4f20\u8f93\u52a0\u5bc6 PLAINTEXT \u4e0d\u9700\u8981\u8fdb\u884c\u8ba4\u8bc1 x SSL \u53ef\u4ee5\u5f00\u542f\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bc1\u4e66 \u221a SASL_PLAINTEXT \u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u7528\u6237\u4fe1\u606f x SASL_SSL \u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u7528\u6237\u4fe1\u606f \u221a \u662f\u5426\u5f00\u542f\u6743\u9650\u63a7\u5236\u4e0d\u7531 security protocol \u51b3\u5b9a\uff0c\u4f46\u662f\u6743\u9650\u63a7\u5236\u9700\u8981\u8bc6\u522b\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u7528\u6237\u8eab\u4efd\uff0c\u53ea\u6709\u5728\u8fde\u63a5\u7ecf\u8fc7\u7528\u6237\u8ba4\u8bc1\u540e\u624d\u6709\u610f\u4e49 security.protocol \u6743\u9650\u63a7\u5236 PLAINTEXT \u8fde\u63a5\u65e0\u7528\u6237\u8eab\u4efd\uff0c\u89c6\u4e3a\u533f\u540d\u7528\u6237 ANONYMOUS SSL \u5982\u679c\u5f00\u542f\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u5219\u4ece\u5ba2\u6237\u7aef\u8bc1\u4e66\u63d0\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u53ef\u4ee5\u652f\u6301\u5f00\u542f\u6743\u9650\u63a7\u5236 SASL_PLAINTEXT \u53ef\u4ee5\u652f\u6301\u5f00\u542f\u6743\u9650\u63a7\u5236 SASL_SSL \u53ef\u4ee5\u652f\u6301\u5f00\u542f\u6743\u9650\u63a7\u5236","title":"1 Security Protocol \u6982\u89c8"},{"location":"1-security%20protocol%20%E6%A6%82%E8%A7%88/#plaintext","text":"\u4e0d\u9700\u8981\u7528\u6237\u8ba4\u8bc1\uff0c\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u8fde\u63a5\u670d\u52a1 \u4f20\u8f93\u6570\u636e\u4e0d\u52a0\u5bc6 \u8fde\u63a5\u4e0d\u643a\u5e26\u7528\u6237\u8eab\u4efd\uff0c\u89c6\u4e3a\u533f\u540d\u7528\u6237\uff08 KafkaPrincipal.ANONYMOUS \uff09\uff0c\u53ef\u4ee5\u521b\u5efa\u7528\u6237\u540d\u4e3a ANONYMOUS \u7684\u7528\u6237\u5e76\u7ed1\u5b9a\u6743\u9650 Broker-side Client-side listeners=PLAINTEXT://127.0.0.1:6667","title":"PLAINTEXT"},{"location":"1-security%20protocol%20%E6%A6%82%E8%A7%88/#ssl","text":"client \u4e0e broker \u5efa\u7acb SSL \u8fde\u63a5\uff0c\u4f20\u8f93\u52a0\u5bc6\u7684\u6570\u636e\uff1a \u6bcf\u4e2a broker \u9700\u63d0\u4f9b\u8bc1\u4e66(keystore \u6587\u4ef6) client \u9700\u8981\u4e00\u4e2a truststore \u6587\u4ef6\uff0c\u8be5 truststore \u6587\u4ef6\u5305\u542b\u53ef\u4fe1 ca \u8bc1\u4e66\uff0c\u8fd9\u91cc\u7684 ca \u5c31\u662f\u7b7e\u53d1 broker \u8bc1\u4e66\u7684 ca \u53e6\u5916\uff0c\u5982\u679c broker \u60f3\u8981\u901a\u8fc7 SSL \u8ba4\u8bc1 client\uff0c\u5219\u9664\u4e0a\u8ff0\u8981\u6c42\uff0c\u8fd8\u9700\uff1a broker \u9700\u8981\u4e00\u4e2a truststore \u6587\u4ef6\uff0c\u8be5 truststore \u6587\u4ef6\u5305\u542b\u53ef\u4fe1 ca \u8bc1\u4e66\uff0c\u8fd9\u91cc\u7684 ca \u5c31\u662f\u7b7e\u53d1 client \u8bc1\u4e66\u7684 ca client \u9700\u8981\u63d0\u4f9b\u8bc1\u4e66(keystore \u6587\u4ef6) \u8fd9\u91cc\u7684\u8ba4\u8bc1\u662f\u6307\uff1aclient \u6301\u6709\u8bc1\u4e66\u662f broker \u4fe1\u4efb\u7684 ca \u7b7e\u53d1\u7684 \u5982\u679c\u9700\u8981\u5bf9 client \u8fde\u63a5\u8bbe\u7f6e acl \u89c4\u5219\uff0c\u5219\u9700\u8981\u4ece\u8bc1\u4e66\u4e2d\u63d0\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u4e00\u822c\u7528\u8bc1\u4e66\u7684 CN \u6216\u8005 SAN \u4fe1\u606f Broker-side Client-side listeners=SSL://127.0.0.1:6667 inter.broker.protocol=SSL security.protocol=SSL","title":"SSL"},{"location":"1-security%20protocol%20%E6%A6%82%E8%A7%88/#sasl_plaintext","text":"client \u4e0e broker \u4e4b\u95f4\u901a\u8fc7 SASL \u673a\u5236\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4f20\u8f93\u5185\u5bb9\u4e0d\u52a0\u5bc6\uff0c\u53ef\u4ee5\u4e3a\u8ba4\u8bc1\u7528\u6237\u8bbe\u7f6e acl \u6743\u9650 Broker-side Client-side listeners=SASL_PLAINTEXT://127.0.0.1:6667 inter.broker.protocol=SASL_PLAINTEXT security.protocol=SASL_PLAINTEXT sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512 sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512","title":"SASL_PLAINTEXT"},{"location":"1-security%20protocol%20%E6%A6%82%E8%A7%88/#sasl_ssl","text":"client \u4e0e broker \u4e4b\u95f4\u901a\u8fc7 SASL \u673a\u5236\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4f20\u8f93\u5185\u5bb9\u901a\u8fc7 SSL \u52a0\u5bc6\uff0c\u53ef\u4ee5\u4e3a\u8ba4\u8bc1\u7528\u6237\u8bbe\u7f6e acl \u6743\u9650 \u56e0\u4e3a\u9700\u8981\u4f7f\u7528 SSL \u52a0\u5bc6\uff0c\u9700\u8981\u5728 broker \u914d\u7f6e SSL \u8bc1\u4e66\uff0cclient \u662f\u5426\u643a\u5e26\u8bc1\u4e66\u4e0d\u662f\u5fc5\u987b\u7684\u3002 2.8.0 \u4e4b\u540e\uff0cSASL_SSL \u53ef\u4ee5\u540c\u65f6\u5f00\u542f client \u8bc1\u4e66\u8ba4\u8bc1(KIP-684) Broker-side Client-side listeners=SASL_SSL://127.0.0.1:6667 inter.broker.protocol=SASL_SSL security.protocol=SASL_SSL sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512 sasl.mechanism=PLAIN / GSSAPI / SCRAM-SHA-256 / SCRAM-SHA-512","title":"SASL_SSL"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/","text":"2 SSL protocol \u652f\u6301 Enabling SSL may have a performance impact due to encryption overhead. SSL protocol \u65e2\u53ef\u4ee5\u7528\u4f5c\u52a0\u5bc6\uff0c\u4e5f\u652f\u6301\u7528\u4f5c\u8ba4\u8bc1 \u8981\u6ce8\u610f broker \u7aef\u548c client \u7aef\u7684 ssl.protocol \u8981\u7edf\u4e00\uff0c\u8981\u4e0d\u7136\u53ef\u80fd\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u83b7\u53d6\u8bc1\u4e66\u4fe1\u606f \u53c2\u8003 https://docs.confluent.io/2.0.0/kafka/ssl.html https://docs.confluent.io/platform/current/kafka/authentication_ssl.html https://www.orchome.com/171","title":"2. SSL protocol \u652f\u6301"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/#2-ssl-protocol","text":"Enabling SSL may have a performance impact due to encryption overhead. SSL protocol \u65e2\u53ef\u4ee5\u7528\u4f5c\u52a0\u5bc6\uff0c\u4e5f\u652f\u6301\u7528\u4f5c\u8ba4\u8bc1 \u8981\u6ce8\u610f broker \u7aef\u548c client \u7aef\u7684 ssl.protocol \u8981\u7edf\u4e00\uff0c\u8981\u4e0d\u7136\u53ef\u80fd\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u83b7\u53d6\u8bc1\u4e66\u4fe1\u606f","title":"2 SSL protocol \u652f\u6301"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/#_1","text":"https://docs.confluent.io/2.0.0/kafka/ssl.html https://docs.confluent.io/platform/current/kafka/authentication_ssl.html https://www.orchome.com/171","title":"\u53c2\u8003"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/1-create-ca-and-cert/","text":"2.0 \u521b\u5efa CA \u548c Certificate 1. \u521b\u5efa SSL key \u548c Certificate \u4e3a\u6bcf\u4e2a Kafka broker \u751f\u6210 keystore \u6587\u4ef6\uff0c\u5b58\u50a8 privae key, public key \u4ee5\u53ca certificate keytool \\ -genkey \\ -alias localhost \\ -keyalg RSA \\ -keysize 2048 \\ -keypass password \\ -storepass password \\ -keystore server.keystore.jks \\ -validity 36500 \\ -dname \"CN=www.amanp.com, OU=amanp, O=amanp, L=BJ, ST=BJ, C=CN\" \\ -ext SAN=DNS:localhost \\ -genkey/-genkeypair: \u751f\u6210\u5bc6\u94a5\u5bf9 -alias localhost: \u4e00\u4e2a keystore \u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a private key \u4e0e certificate\uff0c\u4ee5 alias name \u6807\u8bb0 -keyalg RSA: \u6307\u5b9a\u5bc6\u94a5\u7b97\u6cd5\uff0c\u751f\u6210\u516c\u79c1\u94a5\uff08\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u8fd9\u91cc\u7528 RSA\uff09 -keysize: \u5bc6\u94a5 bit \u957f\u5ea6 -keypass: \u5bc6\u94a5\u53e3\u4ee4\uff08\u5bc6\u94a5 password\uff0c\u4f7f\u7528\u5bc6\u94a5\u65f6\u9700\u8981\uff0c\u6bd4\u5982\u7528\u5bc6\u94a5\u7b7e\u540d\uff09 -storepass password: keystore password \u5bc6\u94a5\u5e93\u53e3\u4ee4\uff08\u5bf9 keystore.jks \u6587\u4ef6\u8fdb\u884c\u6dfb\u52a0/\u67e5\u770b\u7b49\u64cd\u4f5c\uff09 -keystore server.keystore.jks: \u751f\u6210\u7684 keystore \u6587\u4ef6 -validity 36500: \u6709\u6548\u671f\uff0c\u5929 -dname \"CN=www.sample.com, OU=sample, O=sample, L=BJ, ST=BJ, C=CN\" \\ CN(Common Name): first and last name OU: organizational unit O: organization L: City or Locality ST: State or Province C: two-letter country code for this unit -ext SAN=DNS:{FQDN},IP:{IPADDRESS1}: SubjectAlternativeName \u9644\u52a0\u4fe1\u606f\uff0c\u4e0e\u4e3b\u673a\u540d\u9a8c\u8bc1\u6709\u5173 \u67e5\u770b\u5e2e\u52a9 keytool -genkey --help \u5176\u4ed6\u53c2\u6570\uff1a sigalg: \u7b7e\u540d\u7b97\u6cd5\uff08\u6d88\u606f\u6458\u8981\uff09\uff08SHA\uff09\uff0c\u4e0e keyalg \u5339\u914d\uff0c\u6bd4\u5982 keyalg \u662f RSA\uff0csigalg \u53ef\u4ee5\u7528 SHA256withRSA \u9a8c\u8bc1\u8bc1\u4e66\u7684\u5185\u5bb9\uff1a keytool -list -v -keystore server.keystore.jks \u4e3b\u673a\u540d\u9a8c\u8bc1 host name verification \u662f\u6307\u4ece\u8bc1\u4e66\u83b7\u53d6 server \u63d0\u4f9b\u7684\u4fe1\u606f\u4e0e\u6b63\u5728\u8fde\u63a5\u7684 server \u7aef\u7684 hostname \u6216\u8005 ip \u6bd4\u8f83\uff0c\u4ee5\u786e\u4fdd\u8fde\u63a5\u5230\u771f\u5b9e\u7684 server\u3002 \u8fd9\u4e2a\u68c0\u67e5\u7684\u4e3b\u8981\u76ee\u7684\u662f\u9632\u6b62\u4e2d\u95f4\u4eba\u653b\u51fb\u3002\u5f88\u957f\u65f6\u95f4\u4ee5\u6765\uff0c\u8fd9\u4e2a\u68c0\u67e5\u9ed8\u8ba4\u662f\u5173\u95ed\u7684\uff0c\u4ece Kafka 2.0.0 \u4e4b\u540e\uff0chost name verification \u9ed8\u8ba4\u5f00\u542f\u3002 \u53ef\u4ee5\u901a\u8fc7\u5c06 ssl.endpoint.identification.algorithm \u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32\u5173\u95ed\u8fd9\u4e2a\u68c0\u67e5\u3002 bin/kafka-configs.sh --bootstrap-server localhost:9093 --entity-type brokers --entity-name 0 --alter --add-config \"listener.name.internal.ssl.endpoint.identification.algorithm=\" \u5982\u679c host name verification \u5f00\u542f\uff0cclients \u4f1a\u786e\u8ba4 Server \u7684 fully qualified domain name(FQDN) \u6216\u8005 ip address\uff0c\u5373\u4e0b\u9762 2 \u4e2a fields: Common Name(CN) Subject Alternative Name (SAN) \u5c3d\u7ba1 Kafak \u68c0\u67e5\u8fd9 2 \u4e2a fields\uff0c\u4f7f\u7528 Common Name \u7528\u4e8e host name verification \u4ece 2000 \u4e4b\u540e\u662f\u4e0d\u63a8\u8350\u7684\u3002\u7528 SAN field \u66f4\u52a0\u7075\u6d3b\uff0c\u5141\u8bb8\u4f7f\u7528 multiple DNS \u548c IP entries \u58f0\u660e\u5728 certificate \u4e2d 2. \u521b\u5efa\u4f60\u81ea\u5df1\u7684 CA (certificate authority) openssl req -new -x509 -keyout ca-key -out ca-cert -days 36500 ca-key: private and public key ca-cert: ca \u81ea\u8eab\u7684\u8bc1\u4e66\uff0c\u81ea\u7b7e\u540d \u5c06 ca \u81ea\u8eab\u7684\u8bc1\u4e66 ca-cert \u6dfb\u52a0\u5230 client.truststore.jks \u4e2d\uff0c\u5ba2\u6237\u7aef\u6301\u6709 client.truststore.jks \u540e\u53ef\u4fe1\u4efb\u6b64 ca keytool -import -keystore client.truststore.jks -alias CARoot -file ca-cert \u9a8c\u8bc1 truststore \u5185\u5bb9\uff1a keytool -list -v -keystore client.truststore.jks kafka broker require client authentication \u5982\u679c\u9700\u8981\u8ba9 server \u9a8c\u8bc1 client \u7684\u8bc1\u4e66\uff0c\u5373\u5728 broker \u7aef\u8bbe\u7f6e ssl.client.auth=requested \u6216\u8005 ssl.client.auth=required \u65f6\uff0c\u5fc5\u987b\u63d0\u4f9b\u5305\u542b\u7b7e\u53d1 client \u7aef certificate \u7684 CA \u7684 truststore \u6587\u4ef6 keytool -import -keystore server.truststore.jks -alias CARoot -file ca-cert 3. \u7b7e\u540d\u8bc1\u4e66 \u7528 \u6b65\u9aa42 \u751f\u6210\u7684 ca \u7b7e\u540d \u6b65\u9aa41 \u751f\u6210\u7684\u8bc1\u4e66 \u9996\u5148\uff0c\u4ece keystore \u6587\u4ef6\u4e2d\u5bfc\u51fa\u8bc1\u4e66 server-cert\uff0c\u521b\u5efa\u8bc1\u4e66\u8bf7\u6c42\uff1a keytool \\ -certreq \\ -storepass password \\ -keystore server.keystore.jks \\ -alias localhost \\ -file server-cert \u7136\u540e\uff0c\u7528 ca \u7b7e\u540d server-cert\uff0c\u751f\u6210 server-cert-signed: openssl x509 -req \\ -CA ca-cert \\ -CAkey ca-key \\ -in server-cert \\ -out server-cert-signed \\ -days 36500 \\ -CAcreateserial \\ -passin pass:password \u6700\u540e\uff0c\u9700\u8981\u5c06 ca \u548c server \u7684\u8bc1\u4e66\u5bfc\u5165 server.keystore.jks \u6587\u4ef6 keytool \\ -import \\ -noprompt \\ -storepass password \\ -keystore server.keystore.jks \\ -alias CARoot \\ -file ca-cert keytool \\ -import \\ -noprompt \\ -storepass password \\ -keystore server.keystore.jks \\ -alias localhost \\ -file server-cert-signed -noprompt: \u4e0d\u5728\u63d0\u793a\u662f\u5426\u4fe1\u4efb\u8bc1\u4e66\uff0c\u4e0d\u9700\u8981\u8f93\u5165 yes/no(\u76f8\u5f53\u4e8e\u76f4\u63a5\u8f93\u5165 yes \u8868\u793a\u4fe1\u4efb\u8bc1\u4e66) -storepass: keystore \u6587\u4ef6\u7684\u5bc6\u7801 \u5982\u679c server \u9700\u8981\u9a8c\u8bc1 client \u8bc1\u4e66\uff0c\u5219\u540c\u6837\u8981\u7ed9 client \u7b7e\u53d1\u8bc1\u4e66\uff0c\u6b65\u9aa4\u4e0e server \u7aef\u76f8\u540c","title":"2.1 create ca and cert"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/1-create-ca-and-cert/#20-ca-certificate","text":"","title":"2.0 \u521b\u5efa CA \u548c Certificate"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/1-create-ca-and-cert/#1-ssl-key-certificate","text":"\u4e3a\u6bcf\u4e2a Kafka broker \u751f\u6210 keystore \u6587\u4ef6\uff0c\u5b58\u50a8 privae key, public key \u4ee5\u53ca certificate keytool \\ -genkey \\ -alias localhost \\ -keyalg RSA \\ -keysize 2048 \\ -keypass password \\ -storepass password \\ -keystore server.keystore.jks \\ -validity 36500 \\ -dname \"CN=www.amanp.com, OU=amanp, O=amanp, L=BJ, ST=BJ, C=CN\" \\ -ext SAN=DNS:localhost \\ -genkey/-genkeypair: \u751f\u6210\u5bc6\u94a5\u5bf9 -alias localhost: \u4e00\u4e2a keystore \u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a private key \u4e0e certificate\uff0c\u4ee5 alias name \u6807\u8bb0 -keyalg RSA: \u6307\u5b9a\u5bc6\u94a5\u7b97\u6cd5\uff0c\u751f\u6210\u516c\u79c1\u94a5\uff08\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u8fd9\u91cc\u7528 RSA\uff09 -keysize: \u5bc6\u94a5 bit \u957f\u5ea6 -keypass: \u5bc6\u94a5\u53e3\u4ee4\uff08\u5bc6\u94a5 password\uff0c\u4f7f\u7528\u5bc6\u94a5\u65f6\u9700\u8981\uff0c\u6bd4\u5982\u7528\u5bc6\u94a5\u7b7e\u540d\uff09 -storepass password: keystore password \u5bc6\u94a5\u5e93\u53e3\u4ee4\uff08\u5bf9 keystore.jks \u6587\u4ef6\u8fdb\u884c\u6dfb\u52a0/\u67e5\u770b\u7b49\u64cd\u4f5c\uff09 -keystore server.keystore.jks: \u751f\u6210\u7684 keystore \u6587\u4ef6 -validity 36500: \u6709\u6548\u671f\uff0c\u5929 -dname \"CN=www.sample.com, OU=sample, O=sample, L=BJ, ST=BJ, C=CN\" \\ CN(Common Name): first and last name OU: organizational unit O: organization L: City or Locality ST: State or Province C: two-letter country code for this unit -ext SAN=DNS:{FQDN},IP:{IPADDRESS1}: SubjectAlternativeName \u9644\u52a0\u4fe1\u606f\uff0c\u4e0e\u4e3b\u673a\u540d\u9a8c\u8bc1\u6709\u5173 \u67e5\u770b\u5e2e\u52a9 keytool -genkey --help \u5176\u4ed6\u53c2\u6570\uff1a sigalg: \u7b7e\u540d\u7b97\u6cd5\uff08\u6d88\u606f\u6458\u8981\uff09\uff08SHA\uff09\uff0c\u4e0e keyalg \u5339\u914d\uff0c\u6bd4\u5982 keyalg \u662f RSA\uff0csigalg \u53ef\u4ee5\u7528 SHA256withRSA \u9a8c\u8bc1\u8bc1\u4e66\u7684\u5185\u5bb9\uff1a keytool -list -v -keystore server.keystore.jks","title":"1. \u521b\u5efa SSL key \u548c Certificate"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/1-create-ca-and-cert/#_1","text":"host name verification \u662f\u6307\u4ece\u8bc1\u4e66\u83b7\u53d6 server \u63d0\u4f9b\u7684\u4fe1\u606f\u4e0e\u6b63\u5728\u8fde\u63a5\u7684 server \u7aef\u7684 hostname \u6216\u8005 ip \u6bd4\u8f83\uff0c\u4ee5\u786e\u4fdd\u8fde\u63a5\u5230\u771f\u5b9e\u7684 server\u3002 \u8fd9\u4e2a\u68c0\u67e5\u7684\u4e3b\u8981\u76ee\u7684\u662f\u9632\u6b62\u4e2d\u95f4\u4eba\u653b\u51fb\u3002\u5f88\u957f\u65f6\u95f4\u4ee5\u6765\uff0c\u8fd9\u4e2a\u68c0\u67e5\u9ed8\u8ba4\u662f\u5173\u95ed\u7684\uff0c\u4ece Kafka 2.0.0 \u4e4b\u540e\uff0chost name verification \u9ed8\u8ba4\u5f00\u542f\u3002 \u53ef\u4ee5\u901a\u8fc7\u5c06 ssl.endpoint.identification.algorithm \u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32\u5173\u95ed\u8fd9\u4e2a\u68c0\u67e5\u3002 bin/kafka-configs.sh --bootstrap-server localhost:9093 --entity-type brokers --entity-name 0 --alter --add-config \"listener.name.internal.ssl.endpoint.identification.algorithm=\" \u5982\u679c host name verification \u5f00\u542f\uff0cclients \u4f1a\u786e\u8ba4 Server \u7684 fully qualified domain name(FQDN) \u6216\u8005 ip address\uff0c\u5373\u4e0b\u9762 2 \u4e2a fields: Common Name(CN) Subject Alternative Name (SAN) \u5c3d\u7ba1 Kafak \u68c0\u67e5\u8fd9 2 \u4e2a fields\uff0c\u4f7f\u7528 Common Name \u7528\u4e8e host name verification \u4ece 2000 \u4e4b\u540e\u662f\u4e0d\u63a8\u8350\u7684\u3002\u7528 SAN field \u66f4\u52a0\u7075\u6d3b\uff0c\u5141\u8bb8\u4f7f\u7528 multiple DNS \u548c IP entries \u58f0\u660e\u5728 certificate \u4e2d","title":"\u4e3b\u673a\u540d\u9a8c\u8bc1"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/1-create-ca-and-cert/#2-ca-certificate-authority","text":"openssl req -new -x509 -keyout ca-key -out ca-cert -days 36500 ca-key: private and public key ca-cert: ca \u81ea\u8eab\u7684\u8bc1\u4e66\uff0c\u81ea\u7b7e\u540d \u5c06 ca \u81ea\u8eab\u7684\u8bc1\u4e66 ca-cert \u6dfb\u52a0\u5230 client.truststore.jks \u4e2d\uff0c\u5ba2\u6237\u7aef\u6301\u6709 client.truststore.jks \u540e\u53ef\u4fe1\u4efb\u6b64 ca keytool -import -keystore client.truststore.jks -alias CARoot -file ca-cert \u9a8c\u8bc1 truststore \u5185\u5bb9\uff1a keytool -list -v -keystore client.truststore.jks","title":"2. \u521b\u5efa\u4f60\u81ea\u5df1\u7684 CA (certificate authority)"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/1-create-ca-and-cert/#kafka-broker-require-client-authentication","text":"\u5982\u679c\u9700\u8981\u8ba9 server \u9a8c\u8bc1 client \u7684\u8bc1\u4e66\uff0c\u5373\u5728 broker \u7aef\u8bbe\u7f6e ssl.client.auth=requested \u6216\u8005 ssl.client.auth=required \u65f6\uff0c\u5fc5\u987b\u63d0\u4f9b\u5305\u542b\u7b7e\u53d1 client \u7aef certificate \u7684 CA \u7684 truststore \u6587\u4ef6 keytool -import -keystore server.truststore.jks -alias CARoot -file ca-cert","title":"kafka broker require client authentication"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/1-create-ca-and-cert/#3","text":"\u7528 \u6b65\u9aa42 \u751f\u6210\u7684 ca \u7b7e\u540d \u6b65\u9aa41 \u751f\u6210\u7684\u8bc1\u4e66 \u9996\u5148\uff0c\u4ece keystore \u6587\u4ef6\u4e2d\u5bfc\u51fa\u8bc1\u4e66 server-cert\uff0c\u521b\u5efa\u8bc1\u4e66\u8bf7\u6c42\uff1a keytool \\ -certreq \\ -storepass password \\ -keystore server.keystore.jks \\ -alias localhost \\ -file server-cert \u7136\u540e\uff0c\u7528 ca \u7b7e\u540d server-cert\uff0c\u751f\u6210 server-cert-signed: openssl x509 -req \\ -CA ca-cert \\ -CAkey ca-key \\ -in server-cert \\ -out server-cert-signed \\ -days 36500 \\ -CAcreateserial \\ -passin pass:password \u6700\u540e\uff0c\u9700\u8981\u5c06 ca \u548c server \u7684\u8bc1\u4e66\u5bfc\u5165 server.keystore.jks \u6587\u4ef6 keytool \\ -import \\ -noprompt \\ -storepass password \\ -keystore server.keystore.jks \\ -alias CARoot \\ -file ca-cert keytool \\ -import \\ -noprompt \\ -storepass password \\ -keystore server.keystore.jks \\ -alias localhost \\ -file server-cert-signed -noprompt: \u4e0d\u5728\u63d0\u793a\u662f\u5426\u4fe1\u4efb\u8bc1\u4e66\uff0c\u4e0d\u9700\u8981\u8f93\u5165 yes/no(\u76f8\u5f53\u4e8e\u76f4\u63a5\u8f93\u5165 yes \u8868\u793a\u4fe1\u4efb\u8bc1\u4e66) -storepass: keystore \u6587\u4ef6\u7684\u5bc6\u7801 \u5982\u679c server \u9700\u8981\u9a8c\u8bc1 client \u8bc1\u4e66\uff0c\u5219\u540c\u6837\u8981\u7ed9 client \u7b7e\u53d1\u8bc1\u4e66\uff0c\u6b65\u9aa4\u4e0e server \u7aef\u76f8\u540c","title":"3. \u7b7e\u540d\u8bc1\u4e66"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/2-broker%20config/","text":"2.2 broker \u914d\u7f6e server.properties \u76d1\u542c\u5730\u5740\uff0c\u5f53\u5bf9 client \u66b4\u9732\u7684\u5730\u5740\u4e0e\u672c\u5730\u76d1\u542c\u5730\u5740\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f7f\u7528 advertised.listeners \uff1a listeners = PLAINTEXT://:9092,SSL://:9093 advertised.listeners = PLAINTEXT://192.168.16.5:9092,SSL://180.76.140.179:9093 broker \u5185\u90e8\u8fde\u63a5\u4f7f\u7528\u7684\u534f\u8bae\uff1a security.inter.broker.protocol = PLAINTEXT keystore \u4e0e truststore \u7684\u4f4d\u7f6e\u4e0e\u5bc6\u7801\uff1a # \u53ea\u6709\u9700\u8981\u9a8c\u8bc1\u5ba2\u6237\u7aef\u8bc1\u4e66\u65f6\u9700\u8981\u8bbe\u7f6e # ssl.truststore.location=/home/kafka/kafka.server.truststore.jks # ssl.truststore.password=pass1984 ssl.keystore.location = /home/kafka/kafka.server.keystore.jks ssl.keystore.password = pass1984 # \u53ea\u6709\u9700\u8981\u53cc\u5411\u8ba4\u8bc1\u7684\u65f6\u5019\u9700\u8981\u8bbe\u7f6e # ssl.key.password=pass1984 \u5176\u4ed6\u76f8\u5173\u914d\u7f6e SSL \u7248\u672c\uff1a ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 keystore \u4e0e truststore \u7684\u6587\u4ef6\u683c\u5f0f\uff1a ssl.keystore.type = JKS ssl.truststore.type = JKS \u662f\u5426\u5f00\u542f\u4e3b\u673a\u540d\u9a8c\u8bc1\uff1a # \u662f\u5426\u9a8c\u8bc1 broker \u5730\u5740\u4e0e\u8bc1\u4e66\u4e2d\u7684 CN \u6216\u8005 SAN \u4e2d\u5305\u542b\u7684\u4fe1\u606f\u4e00\u81f4 # \u9ed8\u8ba4 https \u8868\u793a\u9700\u8981\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u5173\u95ed\u9a8c\u8bc1 # \u5f53 broker \u9700\u8981\u901a\u8fc7 SSL \u8fde\u63a5\u5176\u4ed6 broker \u65f6\u9700\u8981\u5173\u6ce8\u6b64\u9879\u914d\u7f6e ssl.endpoint.identification.algorithm = \u9a8c\u8bc1\u5ba2\u6237\u7aef certificate \u662f\u5426\u9700\u8981\u9a8c\u8bc1 client certificate\uff1a # none, requested, required ssl.client.auth = required SSL listeners \u53ef\u4ee5\u914d\u7f6e TLS client authentication (also known as mutual TLS authentication)\uff0c\u901a\u8fc7\u53c2\u6570 ssl.client.auth \u8fdb\u884c\u8bbe\u7f6e\uff0c\u53ef\u9009\u7684\u914d\u7f6e\u5982\u4e0b\uff1a none (default): \u5173\u95ed client authenticaion\uff0cassigns User:ANONYMOUS as KafkaPrincipal requested : enables optional client authentication, uses distinguished name (DN) from certificate as KafkaPrincipal by default if certificate provided, User:ANONYMOUS otherwise. required : enables mandatory client authentication, uses DN from certificate as KafkaPrincipal by default. Kafka 2.8.0 \u4e4b\u524d\u5173\u95ed TLS client authentication for SASL_SSL listeners even if ssl.client.auth is configured. 2.8.0 \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u914d\u7f6e\u4e3a SASL_SSL listeners \u914d\u7f6e TLS client authentication # default ssl.client.auth # \u5bf9 ssl listener name \u7684\u914d\u7f6e\uff0c\u4e0d\u914d\u53ef\u4ee5\u56de\u9000\u5230 default listener.name.<sslListenerName>.ssl.client.auth # sasl_ssl listener name listener.name.<saslListenerName>.ssl.client.auth \u4ece\u5ba2\u6237\u7aef\u8bc1\u4e66\u63d0\u53d6\u7528\u6237\u4fe1\u606f \u4ece\u8bc1\u4e66\u4e2d\u63d0\u53d6\u7528\u6237\u4fe1\u606f\uff1a ssl.principal.mapping.rules \u9a8c\u8bc1 SSL \u7aef\u53e3 \u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1 SSL \u7aef\u53e3 openssl s_client -debug -connect 180.76.140.179:9093 -tls1 openssl s_client -debug -connect 180.76.140.179:9093 -tls1_2 -tls1 , -tls1_2 \u5373\u5bf9\u5e94 TLSv1 , TLSv1.2 protocol\uff0c\u6709\u65f6\u5019\u53ea\u6709\u7528\u7279\u5b9a\u7684 protocol \u624d\u80fd\u6b63\u5e38\u8bbf\u95ee\uff0cclient \u5e94\u8be5\u914d\u7f6e ssl.protocol \u4e0e server \u7aef\u76f8\u5339\u914d \u5728\u547d\u4ee4\u7684\u8f93\u51fa\u4e2d\u5e94\u8be5\u80fd\u770b\u5230\u8bc1\u4e66\u4fe1\u606f\uff0c\u7c7b\u4f3c\u8fd9\u4e2a\uff1a -----END CERTIFICATE----- subject=C = cn, ST = beijing, L = beijing, O = amanp, OU = amanp, CN = mapan issuer=C = cn, ST = beijing, L = beijing, O = amanp, OU = amanp, CN = mapan, emailAddress = mapan@amanp.com --- \u5982\u679c\u83b7\u53d6\u4e0d\u5230\u8bc1\u4e66\u4fe1\u606f\uff0c\u5219 SSL \u8bbf\u95ee\u4e0d\u6b63\u5e38","title":"2.2 Broker Config"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/2-broker%20config/#22-broker","text":"","title":"2.2 broker \u914d\u7f6e"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/2-broker%20config/#serverproperties","text":"\u76d1\u542c\u5730\u5740\uff0c\u5f53\u5bf9 client \u66b4\u9732\u7684\u5730\u5740\u4e0e\u672c\u5730\u76d1\u542c\u5730\u5740\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f7f\u7528 advertised.listeners \uff1a listeners = PLAINTEXT://:9092,SSL://:9093 advertised.listeners = PLAINTEXT://192.168.16.5:9092,SSL://180.76.140.179:9093 broker \u5185\u90e8\u8fde\u63a5\u4f7f\u7528\u7684\u534f\u8bae\uff1a security.inter.broker.protocol = PLAINTEXT keystore \u4e0e truststore \u7684\u4f4d\u7f6e\u4e0e\u5bc6\u7801\uff1a # \u53ea\u6709\u9700\u8981\u9a8c\u8bc1\u5ba2\u6237\u7aef\u8bc1\u4e66\u65f6\u9700\u8981\u8bbe\u7f6e # ssl.truststore.location=/home/kafka/kafka.server.truststore.jks # ssl.truststore.password=pass1984 ssl.keystore.location = /home/kafka/kafka.server.keystore.jks ssl.keystore.password = pass1984 # \u53ea\u6709\u9700\u8981\u53cc\u5411\u8ba4\u8bc1\u7684\u65f6\u5019\u9700\u8981\u8bbe\u7f6e # ssl.key.password=pass1984","title":"server.properties"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/2-broker%20config/#_1","text":"SSL \u7248\u672c\uff1a ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 keystore \u4e0e truststore \u7684\u6587\u4ef6\u683c\u5f0f\uff1a ssl.keystore.type = JKS ssl.truststore.type = JKS \u662f\u5426\u5f00\u542f\u4e3b\u673a\u540d\u9a8c\u8bc1\uff1a # \u662f\u5426\u9a8c\u8bc1 broker \u5730\u5740\u4e0e\u8bc1\u4e66\u4e2d\u7684 CN \u6216\u8005 SAN \u4e2d\u5305\u542b\u7684\u4fe1\u606f\u4e00\u81f4 # \u9ed8\u8ba4 https \u8868\u793a\u9700\u8981\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u5173\u95ed\u9a8c\u8bc1 # \u5f53 broker \u9700\u8981\u901a\u8fc7 SSL \u8fde\u63a5\u5176\u4ed6 broker \u65f6\u9700\u8981\u5173\u6ce8\u6b64\u9879\u914d\u7f6e ssl.endpoint.identification.algorithm =","title":"\u5176\u4ed6\u76f8\u5173\u914d\u7f6e"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/2-broker%20config/#certificate","text":"\u662f\u5426\u9700\u8981\u9a8c\u8bc1 client certificate\uff1a # none, requested, required ssl.client.auth = required SSL listeners \u53ef\u4ee5\u914d\u7f6e TLS client authentication (also known as mutual TLS authentication)\uff0c\u901a\u8fc7\u53c2\u6570 ssl.client.auth \u8fdb\u884c\u8bbe\u7f6e\uff0c\u53ef\u9009\u7684\u914d\u7f6e\u5982\u4e0b\uff1a none (default): \u5173\u95ed client authenticaion\uff0cassigns User:ANONYMOUS as KafkaPrincipal requested : enables optional client authentication, uses distinguished name (DN) from certificate as KafkaPrincipal by default if certificate provided, User:ANONYMOUS otherwise. required : enables mandatory client authentication, uses DN from certificate as KafkaPrincipal by default. Kafka 2.8.0 \u4e4b\u524d\u5173\u95ed TLS client authentication for SASL_SSL listeners even if ssl.client.auth is configured. 2.8.0 \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u914d\u7f6e\u4e3a SASL_SSL listeners \u914d\u7f6e TLS client authentication # default ssl.client.auth # \u5bf9 ssl listener name \u7684\u914d\u7f6e\uff0c\u4e0d\u914d\u53ef\u4ee5\u56de\u9000\u5230 default listener.name.<sslListenerName>.ssl.client.auth # sasl_ssl listener name listener.name.<saslListenerName>.ssl.client.auth","title":"\u9a8c\u8bc1\u5ba2\u6237\u7aef certificate"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/2-broker%20config/#_2","text":"\u4ece\u8bc1\u4e66\u4e2d\u63d0\u53d6\u7528\u6237\u4fe1\u606f\uff1a ssl.principal.mapping.rules","title":"\u4ece\u5ba2\u6237\u7aef\u8bc1\u4e66\u63d0\u53d6\u7528\u6237\u4fe1\u606f"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/2-broker%20config/#ssl","text":"\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1 SSL \u7aef\u53e3 openssl s_client -debug -connect 180.76.140.179:9093 -tls1 openssl s_client -debug -connect 180.76.140.179:9093 -tls1_2 -tls1 , -tls1_2 \u5373\u5bf9\u5e94 TLSv1 , TLSv1.2 protocol\uff0c\u6709\u65f6\u5019\u53ea\u6709\u7528\u7279\u5b9a\u7684 protocol \u624d\u80fd\u6b63\u5e38\u8bbf\u95ee\uff0cclient \u5e94\u8be5\u914d\u7f6e ssl.protocol \u4e0e server \u7aef\u76f8\u5339\u914d \u5728\u547d\u4ee4\u7684\u8f93\u51fa\u4e2d\u5e94\u8be5\u80fd\u770b\u5230\u8bc1\u4e66\u4fe1\u606f\uff0c\u7c7b\u4f3c\u8fd9\u4e2a\uff1a -----END CERTIFICATE----- subject=C = cn, ST = beijing, L = beijing, O = amanp, OU = amanp, CN = mapan issuer=C = cn, ST = beijing, L = beijing, O = amanp, OU = amanp, CN = mapan, emailAddress = mapan@amanp.com --- \u5982\u679c\u83b7\u53d6\u4e0d\u5230\u8bc1\u4e66\u4fe1\u606f\uff0c\u5219 SSL \u8bbf\u95ee\u4e0d\u6b63\u5e38","title":"\u9a8c\u8bc1 SSL \u7aef\u53e3"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/3-client%20config/","text":"2.3 client \u914d\u7f6e client_security.properties bootstrap.servers = 180.76.140.179:9093 security.protocol = SSL ssl.truststore.location = /root/client.truststore.jks ssl.truststore.password = pass1984 # \u5982\u679c client \u7aef\u4e5f\u63d0\u4f9b\u8bc1\u4e66 # ssl.keystore.location=/root/client.keystore.jks # ssl.keystore.password=pass1984 # ssl.key.password=pass1984 # server \u5730\u5740\u4e0e\u8bc1\u4e66\u4e2d\u7684 CN \u6216\u8005 SAN \u4e2d\u5305\u542b\u7684\u4fe1\u606f\u4e00\u81f4 # \u9ed8\u8ba4 https \u8868\u793a\u9700\u8981\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u5173\u95ed\u9a8c\u8bc1 ssl.endpoint.identification.algorithm = ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 ssl.protocol = TLSv1.2 \u4f7f\u7528 bin/kafka-console-consumer.sh --bootstrap-server 180.76.140.179:9093 --topic __test --from-beginning --consumer.config client_security.properties","title":"2.3 Client Config"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/3-client%20config/#23-client","text":"","title":"2.3 client \u914d\u7f6e"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/3-client%20config/#client_securityproperties","text":"bootstrap.servers = 180.76.140.179:9093 security.protocol = SSL ssl.truststore.location = /root/client.truststore.jks ssl.truststore.password = pass1984 # \u5982\u679c client \u7aef\u4e5f\u63d0\u4f9b\u8bc1\u4e66 # ssl.keystore.location=/root/client.keystore.jks # ssl.keystore.password=pass1984 # ssl.key.password=pass1984 # server \u5730\u5740\u4e0e\u8bc1\u4e66\u4e2d\u7684 CN \u6216\u8005 SAN \u4e2d\u5305\u542b\u7684\u4fe1\u606f\u4e00\u81f4 # \u9ed8\u8ba4 https \u8868\u793a\u9700\u8981\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u5173\u95ed\u9a8c\u8bc1 ssl.endpoint.identification.algorithm = ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 ssl.protocol = TLSv1.2","title":"client_security.properties"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/3-client%20config/#_1","text":"bin/kafka-console-consumer.sh --bootstrap-server 180.76.140.179:9093 --topic __test --from-beginning --consumer.config client_security.properties","title":"\u4f7f\u7528"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/","text":"2.4 ssl \u539f\u7406\u6982\u8ff0 \u975e\u5bf9\u79f0\u52a0\u5bc6 \u6211\u6709\u4e00\u4e2a \u79c1\u94a5 \u548c\u4e00\u4e2a\u5bf9\u5e94\u7684 \u516c\u94a5 \uff0c\u79c1\u94a5\u7531\u6211\u81ea\u5df1\u4fdd\u5b58\uff0c\u4e0d\u80fd\u6cc4\u9732\u7ed9\u5176\u4ed6\u4eba\uff0c\u516c\u94a5\u5bf9\u5916\u516c\u5f00\u3002 \u8fd9\u4e00\u5bf9\u79c1\u94a5\u548c\u516c\u94a5\u7684\u7279\u6027\u662f\uff1a \u7ecf\u516c\u94a5\u52a0\u5bc6\u7684\u4fe1\u606f\uff0c\u53ea\u80fd\u901a\u8fc7\u79c1\u94a5\u89e3\u5bc6 \u79c1\u94a5\u53ef\u4ee5\u5bf9\u4fe1\u606f\u751f\u6210\u7b7e\u540d\uff0c\u516c\u94a5\u53ef\u4ee5\u9a8c\u8bc1\u7b7e\u540d\uff0c\u4ece\u800c\u786e\u5b9a\uff1a \u8fd9\u4e2a\u4fe1\u606f\u662f\u516c\u94a5\u5bf9\u5e94\u7684\u79c1\u94a5\u7b7e\u540d\u7684 \u4fe1\u606f\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u4fee\u6539 \u7531\u6b64\u5ef6\u4f38\u51fa 2 \u4e2a\u7528\u9014\uff1a \u5982\u679c\u6709\u4eba\u60f3\u7ed9\u6211\u53d1\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u60f3\u8ba9\u9664\u6211\u4eec\u5916\u7684\u5176\u4ed6\u4eba\u77e5\u9053\u8fd9\u4e2a\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u53d1\u9001\u4e4b\u524d\u7528\u6211\u7684\u516c\u94a5\u52a0\u5bc6\u4fe1\u606f\uff0c\u7136\u540e\u53d1\u9001\u52a0\u5bc6\u540e\u7684\u4fe1\u606f\u3002\u8fd9\u6837\u53ea\u6709\u6301\u6709\u79c1\u94a5\u7684\u6211\u624d\u80fd\u89e3\u5bc6\u4fe1\u606f\uff0c\u5176\u4ed6\u4eba\u5373\u4f7f\u62e6\u622a\u5230\u52a0\u5bc6\u7684\u4fe1\u606f\u4e5f\u65e0\u6cd5\u89e3\u5bc6\u3002 \u5982\u679c\u6211\u60f3\u5bf9\u5916\u5ba3\u53d1\u4e00\u4e2a\u4fe1\u606f\uff0c\u540c\u65f6\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u5192\u5145\u6211\u5ba3\u53d1\u865a\u5047\u4fe1\u606f\uff0c\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u7be1\u6539\u6211\u5ba3\u53d1\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u53d1\u5e03\u4fe1\u606f\u4e4b\u524d\u7528\u6211\u7684\u79c1\u94a5\u5bf9\u4fe1\u606f\u8fdb\u884c\u7b7e\u540d\u3002\u8fd9\u6837\u6240\u6709\u6301\u6709\u6211\u516c\u94a5\u7684\u4eba\u90fd\u53ef\u4ee5\u901a\u8fc7\u7b7e\u540d\u786e\u8ba4\u4fe1\u606f\u7684\u786e\u662f\u6211\u53d1\u5e03\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u7ecf\u8fc7\u7be1\u6539\u3002 \u4f46\u662f\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6709\u4eba\u53ef\u80fd\u4f1a\u5192\u5145\u6211\u6563\u53d1\u5047\u7684\u516c\u94a5\uff0c\u90a3\u4e48\u5176\u4ed6\u4eba\u5982\u4f55\u624d\u80fd\u786e\u8ba4\u4ed6\u4eec\u6301\u6709\u7684\u516c\u94a5\u7684\u786e\u662f\u6211\u7684\u516c\u94a5\u5462\uff1f \u8bc1\u4e66 \u6211\u5bf9\u5916\u63d0\u4f9b\u5305\u542b\u6211\u516c\u94a5\u548c\u8eab\u4efd\u4fe1\u606f\u7684\u8bc1\u4e66 \u6211\u4e4b\u524d\u90fd\u662f\u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u6211\u7684\u516c\u94a5\uff0c\u73b0\u5728\u6211\u60f3\u6362\u4e00\u79cd\u65b9\u5f0f\uff0c\u5bf9\u5916\u63d0\u4f9b\u6211\u7684\u8bc1\u4e66\uff0c\u8bc1\u4e66\u91cc\u5305\u542b\u6211\u7684\u516c\u94a5\uff0c\u540c\u65f6\u8fd8\u5305\u542b\u6211\u7684\u8eab\u4efd\u4fe1\u606f\uff0c\u4f8b\u5982\u6211\u7684\u540d\u5b57\uff0c\u6240\u5c5e\u7684\u56fd\u5bb6\uff0c\u7ec4\u7ec7\uff0c\u7279\u522b\u91cd\u8981\u7684\u662f\uff0c\u5982\u679c\u6211\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\uff0c\u53ef\u4ee5\u628a\u6211\u63d0\u4f9b\u670d\u52a1\u7684\u57df\u540d\u6216\u8005 ip \u4f5c\u4e3a\u6211\u8eab\u4efd\u4fe1\u606f\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u4ece\u6211\u7684\u670d\u52a1\u83b7\u53d6\u8bc1\u4e66\uff0c\u540c\u65f6\u68c0\u67e5\u8bc1\u4e66\u91cc\u8eab\u4efd\u4fe1\u606f\u7684\u57df\u540d\u548c\u5f53\u524d\u63d0\u4f9b\u670d\u52a1\u7684\u57df\u540d\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u4ee3\u8868\u6709\u5176\u4ed6\u4eba\u5047\u5192\u6211\u63d0\u4f9b\u6211\u7684\u8bc1\u4e66\u3002 \u8fd9\u6837\u53ef\u4ee5\u89e3\u51b3\u89e3\u51b3\u4e00\u90e8\u5206\u95ee\u9898\uff0c\u4f46\u662f\u4ecd\u7136\u4e0d\u80fd\u9632\u6b62\u6709\u4eba\u62e6\u622a\u5e76\u4fee\u6539\u6211\u8fd4\u56de\u7684\u54cd\u5e94\uff0c\u5c06\u8bc1\u4e66\u91cc\u7684\u516c\u94a5\u66ff\u6362\u6210\u4ed6\u7684\u516c\u94a5\u3002 CA \u627e CA \u5bf9\u6211\u7684\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d \u600e\u4e48\u6837\u53ef\u4ee5\u9632\u6b62\u5176\u4ed6\u4eba\u62e6\u622a\u5e76\u7be1\u6539\u6211\u7684\u8bc1\u4e66\u5185\u5bb9\uff0c\u8fd9\u4e2a\u8981\u6c42\u53ef\u4ee5\u7528\u79c1\u94a5\u7b7e\u540d\u6765\u505a\u3002\u6211\u53ef\u4ee5\u5bf9\u6211\u7684\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd9\u6837\u5982\u679c\u8bc1\u4e66\u5185\u5bb9\u53d1\u751f\u6539\u53d8\uff0c\u5c31\u6ca1\u529e\u6cd5\u548c\u7b7e\u540d\u5bf9\u5e94\u4e86\u3002 \u8fd9\u91cc\u5f53\u7136\u4e0d\u80fd\u7528\u6211\u7684\u79c1\u94a5\u7b7e\u540d\uff08\u4e0d\u8981\u5fd8\u4e86\u8fd9\u91cc\u8bc1\u4e66\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u8ba9\u5176\u4ed6\u4eba\u6b63\u786e\u7684\u83b7\u53d6\u6211\u7684\u516c\u94a5\uff0c\u5728\u6ca1\u6709\u83b7\u53d6\u6211\u7684\u516c\u94a5\u4e4b\u524d\uff0c\u5176\u4ed6\u4eba\u65e0\u6cd5\u9a8c\u8bc1\u6211\u7684\u79c1\u94a5\u7b7e\u540d\uff09\uff0c\u4f46\u662f\u6211\u53ef\u4ee5\u627e\u4e00\u4e2a\u6743\u5a01\u7684\u7b2c\u4e09\u65b9 CA \u5bf9\u6211\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\u3002 \u524d\u63d0\u662f\u6240\u6709\u4eba\u90fd\u8981\u4fe1\u4efb CA \u8fd9\u91cc\u6709\u4e00\u4e2a \u524d\u63d0\u662f\u6240\u6709\u4eba\u90fd\u8981\u4fe1\u4efb CA \uff0c\u5373\u63d0\u524d\u6b63\u786e\u7684\u83b7\u53d6\u5230 CA \u7684\u516c\u94a5\uff08\u5373\u8bc1\u4e66\uff09\uff1a \u6d4f\u89c8\u5668/\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5185\u7f6e\u4e00\u4e9b\u6743\u5a01 CA \u7684\u8bc1\u4e66\uff08CA \u7684\u516c\u94a5\uff0c\u8eab\u4efd\u4fe1\u606f\uff0c\uff08\u5176\u4ed6CA\u7684\u7b7e\u540d\uff09\uff09 \u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0/\u6307\u5b9a\u81ea\u5df1\u4fe1\u4efb CA \u7684\u8bc1\u4e66\uff08CA \u7684\u516c\u94a5\uff0c\u8eab\u4efd\u4fe1\u606f\uff0c\uff08\u5176\u4ed6CA\u7684\u7b7e\u540d\uff09\uff09 CA \u4fe1\u4efb\u94fe: CA \u7684\u8bc1\u4e66\u540c\u6837\u53ef\u4ee5\u8ba9\u5176\u4ed6 CA \u5bf9\u5176\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd9\u6837\u5982\u679c CA 1 \u4e0d\u591f\u6743\u5a01\uff0c\u6ca1\u6709\u5185\u7f6e\u5728\u6d4f\u89c8\u5668/\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u90a3\u4e48 CA 1 \u53ef\u4ee5\u627e\u66f4\u6743\u5a01\u7684 CA \u5bf9\u81ea\u5df1\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd9\u6761 CA \u7b7e\u540d\u7684\u94fe\u6761\u53ef\u4ee5\u4e00\u76f4\u5ef6\u4f38\u4e0b\u53bb\u3002\u4fe1\u4efb\u94fe\u7684\u7ec8\u70b9\u88ab\u79f0\u4e3a root CA\uff0c\u5b83\u662f\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u3002 CA \u9700\u8981\u786e\u8ba4\u6211\u7684\u516c\u94a5\u5c31\u662f\u6211\u7684\u516c\u94a5 CA \u5728\u5bf9\u6211\u7684\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\u4e4b\u524d\uff0c\u8981\u9a8c\u8bc1\u6211\u7684\u8eab\u4efd\uff0c\u4e00\u822c\u662f\u8fd9\u6837\u505a\u7684\uff1a \u4f8b\u5982\u6211\u5bf9\u5916\u63d0\u4f9b\u4e00\u4e2a\u7f51\u7ad9\u670d\u52a1\uff0c\u90a3\u4e48\u6211\u8bc1\u4e66\u8eab\u4efd\u4fe1\u606f\u4e5f\u8981\u6709\u8fd9\u4e2a\u7f51\u7ad9\u5730\u5740\uff0cCA \u4f1a\u8981\u6c42\u6211\u5728\u6211\u7684\u7f51\u7ad9\u589e\u52a0\u4e00\u4e2a\u6587\u672c\u94fe\u63a5\uff0c\u6587\u672c\u5185\u5bb9\u662f CA \u968f\u673a\u751f\u6210\u7684\u5185\u5bb9\uff0c\u6211\u5728\u7f51\u7ad9\u589e\u52a0\u4e86\u8fd9\u4e2a\u6587\u672c\u540e\uff0cCA \u5c31\u53ef\u4ee5\u786e\u8ba4\u6211\u7684\u786e\u662f\u8fd9\u4e2a\u7f51\u7ad9\u7684\u62e5\u6709\u8005\u3002 \u6211\u5bf9\u5916\u516c\u5e03 CA \u7b7e\u540d\u540e\u7684\u8bc1\u4e66(\u5305\u542b\u4e86\u6211\u7684\u516c\u94a5\uff0c\u8eab\u4efd\u4fe1\u606f\uff0cCA \u7b7e\u540d) CA \u7b7e\u540d\u4e4b\u540e\uff0c\u6211\u53ef\u4ee5\u5bf9\u5916\u516c\u5e03 CA \u7b7e\u540d\u540e\u7684\u8bc1\u4e66\uff1a \u5176\u4ed6\u4eba\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6bd4\u8bc1\u4e66\u4e2d\u7684\u8eab\u4efd\u4fe1\u606f\u548c\u83b7\u53d6\u8bc1\u4e66\u7684\u670d\u52a1\u5730\u5740\u786e\u8ba4\u8fd9\u4e2a\u8bc1\u4e66\u7684\u786e\u662f\u6211\u7684\u8bc1\u4e66 \u540c\u65f6\u901a\u8fc7 CA \u7b7e\u540d\u53ef\u4ee5\u9a8c\u8bc1\u8bc1\u4e66\u6ca1\u6709\u88ab\u62e6\u622a\u7be1\u6539\u8fc7 \u8fd9\u6837\u5176\u4ed6\u4eba\u5c31\u53ef\u4ee5\u6b63\u786e\u7684\u83b7\u53d6\u6211\u5bf9\u5916\u516c\u5e03\u7684\u516c\u94a5\u4e86","title":"2.4 ssl \u539f\u7406\u6982\u8ff0"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#24-ssl","text":"","title":"2.4 ssl \u539f\u7406\u6982\u8ff0"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#_1","text":"\u6211\u6709\u4e00\u4e2a \u79c1\u94a5 \u548c\u4e00\u4e2a\u5bf9\u5e94\u7684 \u516c\u94a5 \uff0c\u79c1\u94a5\u7531\u6211\u81ea\u5df1\u4fdd\u5b58\uff0c\u4e0d\u80fd\u6cc4\u9732\u7ed9\u5176\u4ed6\u4eba\uff0c\u516c\u94a5\u5bf9\u5916\u516c\u5f00\u3002 \u8fd9\u4e00\u5bf9\u79c1\u94a5\u548c\u516c\u94a5\u7684\u7279\u6027\u662f\uff1a \u7ecf\u516c\u94a5\u52a0\u5bc6\u7684\u4fe1\u606f\uff0c\u53ea\u80fd\u901a\u8fc7\u79c1\u94a5\u89e3\u5bc6 \u79c1\u94a5\u53ef\u4ee5\u5bf9\u4fe1\u606f\u751f\u6210\u7b7e\u540d\uff0c\u516c\u94a5\u53ef\u4ee5\u9a8c\u8bc1\u7b7e\u540d\uff0c\u4ece\u800c\u786e\u5b9a\uff1a \u8fd9\u4e2a\u4fe1\u606f\u662f\u516c\u94a5\u5bf9\u5e94\u7684\u79c1\u94a5\u7b7e\u540d\u7684 \u4fe1\u606f\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u4fee\u6539 \u7531\u6b64\u5ef6\u4f38\u51fa 2 \u4e2a\u7528\u9014\uff1a \u5982\u679c\u6709\u4eba\u60f3\u7ed9\u6211\u53d1\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u60f3\u8ba9\u9664\u6211\u4eec\u5916\u7684\u5176\u4ed6\u4eba\u77e5\u9053\u8fd9\u4e2a\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u53d1\u9001\u4e4b\u524d\u7528\u6211\u7684\u516c\u94a5\u52a0\u5bc6\u4fe1\u606f\uff0c\u7136\u540e\u53d1\u9001\u52a0\u5bc6\u540e\u7684\u4fe1\u606f\u3002\u8fd9\u6837\u53ea\u6709\u6301\u6709\u79c1\u94a5\u7684\u6211\u624d\u80fd\u89e3\u5bc6\u4fe1\u606f\uff0c\u5176\u4ed6\u4eba\u5373\u4f7f\u62e6\u622a\u5230\u52a0\u5bc6\u7684\u4fe1\u606f\u4e5f\u65e0\u6cd5\u89e3\u5bc6\u3002 \u5982\u679c\u6211\u60f3\u5bf9\u5916\u5ba3\u53d1\u4e00\u4e2a\u4fe1\u606f\uff0c\u540c\u65f6\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u5192\u5145\u6211\u5ba3\u53d1\u865a\u5047\u4fe1\u606f\uff0c\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u7be1\u6539\u6211\u5ba3\u53d1\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u53d1\u5e03\u4fe1\u606f\u4e4b\u524d\u7528\u6211\u7684\u79c1\u94a5\u5bf9\u4fe1\u606f\u8fdb\u884c\u7b7e\u540d\u3002\u8fd9\u6837\u6240\u6709\u6301\u6709\u6211\u516c\u94a5\u7684\u4eba\u90fd\u53ef\u4ee5\u901a\u8fc7\u7b7e\u540d\u786e\u8ba4\u4fe1\u606f\u7684\u786e\u662f\u6211\u53d1\u5e03\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u7ecf\u8fc7\u7be1\u6539\u3002 \u4f46\u662f\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6709\u4eba\u53ef\u80fd\u4f1a\u5192\u5145\u6211\u6563\u53d1\u5047\u7684\u516c\u94a5\uff0c\u90a3\u4e48\u5176\u4ed6\u4eba\u5982\u4f55\u624d\u80fd\u786e\u8ba4\u4ed6\u4eec\u6301\u6709\u7684\u516c\u94a5\u7684\u786e\u662f\u6211\u7684\u516c\u94a5\u5462\uff1f","title":"\u975e\u5bf9\u79f0\u52a0\u5bc6"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#_2","text":"","title":"\u8bc1\u4e66"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#_3","text":"\u6211\u4e4b\u524d\u90fd\u662f\u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u6211\u7684\u516c\u94a5\uff0c\u73b0\u5728\u6211\u60f3\u6362\u4e00\u79cd\u65b9\u5f0f\uff0c\u5bf9\u5916\u63d0\u4f9b\u6211\u7684\u8bc1\u4e66\uff0c\u8bc1\u4e66\u91cc\u5305\u542b\u6211\u7684\u516c\u94a5\uff0c\u540c\u65f6\u8fd8\u5305\u542b\u6211\u7684\u8eab\u4efd\u4fe1\u606f\uff0c\u4f8b\u5982\u6211\u7684\u540d\u5b57\uff0c\u6240\u5c5e\u7684\u56fd\u5bb6\uff0c\u7ec4\u7ec7\uff0c\u7279\u522b\u91cd\u8981\u7684\u662f\uff0c\u5982\u679c\u6211\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\uff0c\u53ef\u4ee5\u628a\u6211\u63d0\u4f9b\u670d\u52a1\u7684\u57df\u540d\u6216\u8005 ip \u4f5c\u4e3a\u6211\u8eab\u4efd\u4fe1\u606f\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u4ece\u6211\u7684\u670d\u52a1\u83b7\u53d6\u8bc1\u4e66\uff0c\u540c\u65f6\u68c0\u67e5\u8bc1\u4e66\u91cc\u8eab\u4efd\u4fe1\u606f\u7684\u57df\u540d\u548c\u5f53\u524d\u63d0\u4f9b\u670d\u52a1\u7684\u57df\u540d\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u4ee3\u8868\u6709\u5176\u4ed6\u4eba\u5047\u5192\u6211\u63d0\u4f9b\u6211\u7684\u8bc1\u4e66\u3002 \u8fd9\u6837\u53ef\u4ee5\u89e3\u51b3\u89e3\u51b3\u4e00\u90e8\u5206\u95ee\u9898\uff0c\u4f46\u662f\u4ecd\u7136\u4e0d\u80fd\u9632\u6b62\u6709\u4eba\u62e6\u622a\u5e76\u4fee\u6539\u6211\u8fd4\u56de\u7684\u54cd\u5e94\uff0c\u5c06\u8bc1\u4e66\u91cc\u7684\u516c\u94a5\u66ff\u6362\u6210\u4ed6\u7684\u516c\u94a5\u3002","title":"\u6211\u5bf9\u5916\u63d0\u4f9b\u5305\u542b\u6211\u516c\u94a5\u548c\u8eab\u4efd\u4fe1\u606f\u7684\u8bc1\u4e66"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#ca","text":"","title":"CA"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#ca_1","text":"\u600e\u4e48\u6837\u53ef\u4ee5\u9632\u6b62\u5176\u4ed6\u4eba\u62e6\u622a\u5e76\u7be1\u6539\u6211\u7684\u8bc1\u4e66\u5185\u5bb9\uff0c\u8fd9\u4e2a\u8981\u6c42\u53ef\u4ee5\u7528\u79c1\u94a5\u7b7e\u540d\u6765\u505a\u3002\u6211\u53ef\u4ee5\u5bf9\u6211\u7684\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd9\u6837\u5982\u679c\u8bc1\u4e66\u5185\u5bb9\u53d1\u751f\u6539\u53d8\uff0c\u5c31\u6ca1\u529e\u6cd5\u548c\u7b7e\u540d\u5bf9\u5e94\u4e86\u3002 \u8fd9\u91cc\u5f53\u7136\u4e0d\u80fd\u7528\u6211\u7684\u79c1\u94a5\u7b7e\u540d\uff08\u4e0d\u8981\u5fd8\u4e86\u8fd9\u91cc\u8bc1\u4e66\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u8ba9\u5176\u4ed6\u4eba\u6b63\u786e\u7684\u83b7\u53d6\u6211\u7684\u516c\u94a5\uff0c\u5728\u6ca1\u6709\u83b7\u53d6\u6211\u7684\u516c\u94a5\u4e4b\u524d\uff0c\u5176\u4ed6\u4eba\u65e0\u6cd5\u9a8c\u8bc1\u6211\u7684\u79c1\u94a5\u7b7e\u540d\uff09\uff0c\u4f46\u662f\u6211\u53ef\u4ee5\u627e\u4e00\u4e2a\u6743\u5a01\u7684\u7b2c\u4e09\u65b9 CA \u5bf9\u6211\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\u3002","title":"\u627e CA \u5bf9\u6211\u7684\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#ca_2","text":"\u8fd9\u91cc\u6709\u4e00\u4e2a \u524d\u63d0\u662f\u6240\u6709\u4eba\u90fd\u8981\u4fe1\u4efb CA \uff0c\u5373\u63d0\u524d\u6b63\u786e\u7684\u83b7\u53d6\u5230 CA \u7684\u516c\u94a5\uff08\u5373\u8bc1\u4e66\uff09\uff1a \u6d4f\u89c8\u5668/\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5185\u7f6e\u4e00\u4e9b\u6743\u5a01 CA \u7684\u8bc1\u4e66\uff08CA \u7684\u516c\u94a5\uff0c\u8eab\u4efd\u4fe1\u606f\uff0c\uff08\u5176\u4ed6CA\u7684\u7b7e\u540d\uff09\uff09 \u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0/\u6307\u5b9a\u81ea\u5df1\u4fe1\u4efb CA \u7684\u8bc1\u4e66\uff08CA \u7684\u516c\u94a5\uff0c\u8eab\u4efd\u4fe1\u606f\uff0c\uff08\u5176\u4ed6CA\u7684\u7b7e\u540d\uff09\uff09 CA \u4fe1\u4efb\u94fe: CA \u7684\u8bc1\u4e66\u540c\u6837\u53ef\u4ee5\u8ba9\u5176\u4ed6 CA \u5bf9\u5176\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd9\u6837\u5982\u679c CA 1 \u4e0d\u591f\u6743\u5a01\uff0c\u6ca1\u6709\u5185\u7f6e\u5728\u6d4f\u89c8\u5668/\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u90a3\u4e48 CA 1 \u53ef\u4ee5\u627e\u66f4\u6743\u5a01\u7684 CA \u5bf9\u81ea\u5df1\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd9\u6761 CA \u7b7e\u540d\u7684\u94fe\u6761\u53ef\u4ee5\u4e00\u76f4\u5ef6\u4f38\u4e0b\u53bb\u3002\u4fe1\u4efb\u94fe\u7684\u7ec8\u70b9\u88ab\u79f0\u4e3a root CA\uff0c\u5b83\u662f\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u3002","title":"\u524d\u63d0\u662f\u6240\u6709\u4eba\u90fd\u8981\u4fe1\u4efb CA"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#ca_3","text":"CA \u5728\u5bf9\u6211\u7684\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\u4e4b\u524d\uff0c\u8981\u9a8c\u8bc1\u6211\u7684\u8eab\u4efd\uff0c\u4e00\u822c\u662f\u8fd9\u6837\u505a\u7684\uff1a \u4f8b\u5982\u6211\u5bf9\u5916\u63d0\u4f9b\u4e00\u4e2a\u7f51\u7ad9\u670d\u52a1\uff0c\u90a3\u4e48\u6211\u8bc1\u4e66\u8eab\u4efd\u4fe1\u606f\u4e5f\u8981\u6709\u8fd9\u4e2a\u7f51\u7ad9\u5730\u5740\uff0cCA \u4f1a\u8981\u6c42\u6211\u5728\u6211\u7684\u7f51\u7ad9\u589e\u52a0\u4e00\u4e2a\u6587\u672c\u94fe\u63a5\uff0c\u6587\u672c\u5185\u5bb9\u662f CA \u968f\u673a\u751f\u6210\u7684\u5185\u5bb9\uff0c\u6211\u5728\u7f51\u7ad9\u589e\u52a0\u4e86\u8fd9\u4e2a\u6587\u672c\u540e\uff0cCA \u5c31\u53ef\u4ee5\u786e\u8ba4\u6211\u7684\u786e\u662f\u8fd9\u4e2a\u7f51\u7ad9\u7684\u62e5\u6709\u8005\u3002","title":"CA \u9700\u8981\u786e\u8ba4\u6211\u7684\u516c\u94a5\u5c31\u662f\u6211\u7684\u516c\u94a5"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/4-ssl/#ca-ca","text":"CA \u7b7e\u540d\u4e4b\u540e\uff0c\u6211\u53ef\u4ee5\u5bf9\u5916\u516c\u5e03 CA \u7b7e\u540d\u540e\u7684\u8bc1\u4e66\uff1a \u5176\u4ed6\u4eba\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6bd4\u8bc1\u4e66\u4e2d\u7684\u8eab\u4efd\u4fe1\u606f\u548c\u83b7\u53d6\u8bc1\u4e66\u7684\u670d\u52a1\u5730\u5740\u786e\u8ba4\u8fd9\u4e2a\u8bc1\u4e66\u7684\u786e\u662f\u6211\u7684\u8bc1\u4e66 \u540c\u65f6\u901a\u8fc7 CA \u7b7e\u540d\u53ef\u4ee5\u9a8c\u8bc1\u8bc1\u4e66\u6ca1\u6709\u88ab\u62e6\u622a\u7be1\u6539\u8fc7 \u8fd9\u6837\u5176\u4ed6\u4eba\u5c31\u53ef\u4ee5\u6b63\u786e\u7684\u83b7\u53d6\u6211\u5bf9\u5916\u516c\u5e03\u7684\u516c\u94a5\u4e86","title":"\u6211\u5bf9\u5916\u516c\u5e03 CA \u7b7e\u540d\u540e\u7684\u8bc1\u4e66(\u5305\u542b\u4e86\u6211\u7684\u516c\u94a5\uff0c\u8eab\u4efd\u4fe1\u606f\uff0cCA \u7b7e\u540d)"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/5-other/","text":"JDK 11 keytool genkey \u65e0\u6cd5\u6307\u5b9a keypass keytool \\ -genkey \\ -alias localhost \\ -keyalg RSA \\ -keysize 2048 \\ -keypass keypassword \\ -storepass keystorepassword \\ -keystore server.keystore.jks \\ -validity 36500 \\ -dname \"CN=www.amanp.com, OU=amanp, O=amanp, L=BJ, ST=BJ, C=CN\" \\ -ext SAN=DNS:localhost JDK 11 \u521b\u5efa SSL key \u544a\u8b66\uff1a Warning: Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified -keypass value. \u89e3\u51b3\u65b9\u5f0f\uff1a\u5c06 keypass \u4e0e storepass \u8bbe\u7f6e\u4e3a\u76f8\u540c\u503c https://developer.android.com/studio/releases#ki-key-keystore-warning https://bugs.openjdk.java.net/browse/JDK-8008292 \u6570\u5b57\u8bc1\u4e66\u683c\u5f0f *.DER \u6216 *.CER \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u53ea\u542b\u6709\u8bc1\u4e66\u4fe1\u606f\uff0c\u4e0d\u5305\u542b\u79c1\u94a5\u3002 *.CRT \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f\u6587\u672c\u683c\u5f0f\uff0c\u4e00\u822c\u5747\u4e3a\u6587\u672c\u683c\u5f0f\uff0c\u529f\u80fd\u4e0e *.DER \u53ca *.CER \u8bc1\u4e66\u6587\u4ef6\u76f8\u540c\u3002 *.PEM \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u4e00\u822c\u662f\u6587\u672c\u683c\u5f0f\uff0c\u53ef\u4ee5\u5b58\u653e\u8bc1\u4e66\u6216\u79c1\u94a5\uff0c\u6216\u8005\u4e24\u8005\u90fd\u5305\u542b\u3002 *.PEM \u6587\u4ef6\u5982\u679c\u53ea\u5305\u542b\u79c1\u94a5\uff0c\u4e00\u822c\u7528 *.KEY \u6587\u4ef6\u4ee3\u66ff\u3002 *.PFX \u6216 *.P12 \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u540c\u65f6\u5305\u542b\u8bc1\u4e66\u548c\u79c1\u94a5\uff0c\u4e14\u4e00\u822c\u6709\u5bc6\u7801\u4fdd\u62a4\u3002 \u683c\u5f0f\u8f6c\u6362 JKS \u2192 PFX(PKCS12) keytool \\ -importkeystore \\ -srckeystore client.truststore.jks \\ -destkeystore client.truststore.pfx \\ -srcstoretype jks \\ -deststoretype pkcs12 PFX \u2192 PEM/KEY/CRT \u4f7f\u7528 OpenSSL \u5de5\u5177\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5c06 pfx \u683c\u5f0f\u8bc1\u4e66\u8f6c\u6362\u6210 pem \u8bc1\u4e66\u6587\u4ef6\uff1a openssl pkcs12 -in client.truststore.pfx -nodes -out client.truststore.pem openssl pkcs12 -in client.truststore.pfx -nokeys -out client.truststore.pem openssl pkcs12 -in client.truststore.pfx -nocerts -out client.truststore.key -nodes -nodes\uff1a\u4e00\u76f4\u5bf9\u79c1\u94a5\u4e0d\u52a0\u5bc6\u3002 -nocerts\uff1a\u4e0d\u8f93\u51fa\u4efb\u4f55\u8bc1\u4e66\u3002 -nokeys\uff1a\u4e0d\u8f93\u51fa\u4efb\u4f55\u79c1\u94a5\u4fe1\u606f\u503c\u3002 \u5c06 pem \u8bc1\u4e66\u6587\u4ef6\u8f6c\u6362\u4e3a key \u683c\u5f0f\u5bc6\u94a5\u6587\u4ef6\uff08server.key\uff09\u4e0e crt \u683c\u5f0f\u516c\u94a5\u6587\u4ef6\uff08server.crt\uff09 openssl rsa -in client.truststore.pem -out client.truststore.key openssl x509 -in client.truststore.pem -out client.truststore.crt https://help.aliyun.com/document_detail/42214.html","title":"5 other"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/5-other/#jdk-11-keytool-genkey-keypass","text":"keytool \\ -genkey \\ -alias localhost \\ -keyalg RSA \\ -keysize 2048 \\ -keypass keypassword \\ -storepass keystorepassword \\ -keystore server.keystore.jks \\ -validity 36500 \\ -dname \"CN=www.amanp.com, OU=amanp, O=amanp, L=BJ, ST=BJ, C=CN\" \\ -ext SAN=DNS:localhost JDK 11 \u521b\u5efa SSL key \u544a\u8b66\uff1a Warning: Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified -keypass value. \u89e3\u51b3\u65b9\u5f0f\uff1a\u5c06 keypass \u4e0e storepass \u8bbe\u7f6e\u4e3a\u76f8\u540c\u503c https://developer.android.com/studio/releases#ki-key-keystore-warning https://bugs.openjdk.java.net/browse/JDK-8008292","title":"JDK 11 keytool genkey \u65e0\u6cd5\u6307\u5b9a keypass"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/5-other/#_1","text":"*.DER \u6216 *.CER \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u53ea\u542b\u6709\u8bc1\u4e66\u4fe1\u606f\uff0c\u4e0d\u5305\u542b\u79c1\u94a5\u3002 *.CRT \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f\u6587\u672c\u683c\u5f0f\uff0c\u4e00\u822c\u5747\u4e3a\u6587\u672c\u683c\u5f0f\uff0c\u529f\u80fd\u4e0e *.DER \u53ca *.CER \u8bc1\u4e66\u6587\u4ef6\u76f8\u540c\u3002 *.PEM \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u4e00\u822c\u662f\u6587\u672c\u683c\u5f0f\uff0c\u53ef\u4ee5\u5b58\u653e\u8bc1\u4e66\u6216\u79c1\u94a5\uff0c\u6216\u8005\u4e24\u8005\u90fd\u5305\u542b\u3002 *.PEM \u6587\u4ef6\u5982\u679c\u53ea\u5305\u542b\u79c1\u94a5\uff0c\u4e00\u822c\u7528 *.KEY \u6587\u4ef6\u4ee3\u66ff\u3002 *.PFX \u6216 *.P12 \u6587\u4ef6\uff1a \u8fd9\u6837\u7684\u8bc1\u4e66\u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u540c\u65f6\u5305\u542b\u8bc1\u4e66\u548c\u79c1\u94a5\uff0c\u4e14\u4e00\u822c\u6709\u5bc6\u7801\u4fdd\u62a4\u3002","title":"\u6570\u5b57\u8bc1\u4e66\u683c\u5f0f"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/5-other/#_2","text":"","title":"\u683c\u5f0f\u8f6c\u6362"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/5-other/#jks-pfxpkcs12","text":"keytool \\ -importkeystore \\ -srckeystore client.truststore.jks \\ -destkeystore client.truststore.pfx \\ -srcstoretype jks \\ -deststoretype pkcs12","title":"JKS \u2192 PFX(PKCS12)"},{"location":"2-SSL%20protocol%20%E6%94%AF%E6%8C%81/5-other/#pfx-pemkeycrt","text":"\u4f7f\u7528 OpenSSL \u5de5\u5177\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5c06 pfx \u683c\u5f0f\u8bc1\u4e66\u8f6c\u6362\u6210 pem \u8bc1\u4e66\u6587\u4ef6\uff1a openssl pkcs12 -in client.truststore.pfx -nodes -out client.truststore.pem openssl pkcs12 -in client.truststore.pfx -nokeys -out client.truststore.pem openssl pkcs12 -in client.truststore.pfx -nocerts -out client.truststore.key -nodes -nodes\uff1a\u4e00\u76f4\u5bf9\u79c1\u94a5\u4e0d\u52a0\u5bc6\u3002 -nocerts\uff1a\u4e0d\u8f93\u51fa\u4efb\u4f55\u8bc1\u4e66\u3002 -nokeys\uff1a\u4e0d\u8f93\u51fa\u4efb\u4f55\u79c1\u94a5\u4fe1\u606f\u503c\u3002 \u5c06 pem \u8bc1\u4e66\u6587\u4ef6\u8f6c\u6362\u4e3a key \u683c\u5f0f\u5bc6\u94a5\u6587\u4ef6\uff08server.key\uff09\u4e0e crt \u683c\u5f0f\u516c\u94a5\u6587\u4ef6\uff08server.crt\uff09 openssl rsa -in client.truststore.pem -out client.truststore.key openssl x509 -in client.truststore.pem -out client.truststore.crt https://help.aliyun.com/document_detail/42214.html","title":"PFX \u2192 PEM/KEY/CRT"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/","text":"3 SASL \u652f\u6301 Kafka \u63d0\u4f9b SASL_PLAINTEXT \u4e0e SASL_SSL protocol\uff0c\u533a\u522b\u5728\u4e8e SASL_SSL \u4f1a\u4f7f\u7528 SSL \u52a0\u5bc6\u6570\u636e\u4f20\u8f93\uff0c\u5982\u679c\u4f7f\u7528 SASL_SSL \uff0c\u5219\u5fc5\u987b\u589e\u52a0 SSL \u914d\u7f6e Kafka \u652f\u6301\u4ee5\u4e0b SASL \u673a\u5236\uff1a GSSAPI (Kerberos) - \u4ece 0.9.0.0 \u7248\u672c\u5f00\u59cb PLAIN - \u4ece 0.10.0.0 \u7248\u672c\u5f00\u59cb: clients authenticate using username/pssword SCRAM-SHA-256/SCRAM-SHA-512 - \u4ece 0.10.2.0 \u7248\u672c\u5f00\u59cb OAUTHBEARER - \u4ece 2.0 \u7248\u672c\u5f00\u59cb \u8fd9\u91cc\u6709\u4e00\u4e2a\u5bb9\u6613\u6df7\u6dc6\u7684\u70b9\uff1a Kafka \u5173\u4e8e SASL \u63d0\u4f9b 2 \u79cd\u534f\u8bae( security.protocol )\uff0c\u5206\u522b\u662f SASL_PLAINTEXT \u4e0e SASL_SSL \uff0c\u533a\u522b\u5728\u4e8e\u662f\u5426\u4f7f\u7528 SSL \u52a0\u5bc6\u6570\u636e\u4f20\u8f93 PLAIN \u662f SASL \u7684\u4e00\u79cd\u673a\u5236( sasl.enabled.mechanisms )\uff0c\u4e0e\u6570\u636e\u4f20\u8f93\u662f\u5426\u52a0\u5bc6\u65e0\u5173\uff0c SASL_PLAINTEXT \u4e0e SASL_SSL \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e00\u673a\u5236","title":"3. SASL protocol \u652f\u6301"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/#3-sasl","text":"Kafka \u63d0\u4f9b SASL_PLAINTEXT \u4e0e SASL_SSL protocol\uff0c\u533a\u522b\u5728\u4e8e SASL_SSL \u4f1a\u4f7f\u7528 SSL \u52a0\u5bc6\u6570\u636e\u4f20\u8f93\uff0c\u5982\u679c\u4f7f\u7528 SASL_SSL \uff0c\u5219\u5fc5\u987b\u589e\u52a0 SSL \u914d\u7f6e Kafka \u652f\u6301\u4ee5\u4e0b SASL \u673a\u5236\uff1a GSSAPI (Kerberos) - \u4ece 0.9.0.0 \u7248\u672c\u5f00\u59cb PLAIN - \u4ece 0.10.0.0 \u7248\u672c\u5f00\u59cb: clients authenticate using username/pssword SCRAM-SHA-256/SCRAM-SHA-512 - \u4ece 0.10.2.0 \u7248\u672c\u5f00\u59cb OAUTHBEARER - \u4ece 2.0 \u7248\u672c\u5f00\u59cb \u8fd9\u91cc\u6709\u4e00\u4e2a\u5bb9\u6613\u6df7\u6dc6\u7684\u70b9\uff1a Kafka \u5173\u4e8e SASL \u63d0\u4f9b 2 \u79cd\u534f\u8bae( security.protocol )\uff0c\u5206\u522b\u662f SASL_PLAINTEXT \u4e0e SASL_SSL \uff0c\u533a\u522b\u5728\u4e8e\u662f\u5426\u4f7f\u7528 SSL \u52a0\u5bc6\u6570\u636e\u4f20\u8f93 PLAIN \u662f SASL \u7684\u4e00\u79cd\u673a\u5236( sasl.enabled.mechanisms )\uff0c\u4e0e\u6570\u636e\u4f20\u8f93\u662f\u5426\u52a0\u5bc6\u65e0\u5173\uff0c SASL_PLAINTEXT \u4e0e SASL_SSL \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e00\u673a\u5236","title":"3 SASL \u652f\u6301"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/1-PLAIN%20mechanisms/","text":"3.1 PLAIN mechanisms broker \u914d\u7f6e server.properties \u76d1\u542c\u5730\u5740\uff0c\u8fd9\u91cc\u540c\u65f6\u4f7f\u7528 SASL_PLAINTEXT \u4e0e SASL_SSL \uff0c\u8981\u6ce8\u610f\u4f7f\u7528 SASL_SSL \u9700\u8981\u914d\u7f6e SSL\uff0c\u4e0e\u4e4b\u524d\u4e00\u81f4\uff0c\u8fd9\u91cc\u4e0d\u505a\u8bf4\u660e listeners = SASL_PLAINTEXT://:9094,SASL_SSL://:9095 advertised.listeners = SASL_PLAINTEXT://192.168.16.5:9094,SASL_SSL://180.76.140.179:9095 SASL \u4f7f\u7528\u7684\u673a\u5236\uff1a sasl.enabled.mechanisms = PLAIN # \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2a # sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512 broker \u4e4b\u95f4\u5982\u679c\u8981\u4f7f\u7528 SASL \u8fdb\u884c\u901a\u4fe1\uff0c\u9700\u8981\u8bbe\u7f6e: security.inter.broker.protocol = SASL_PLAINTEXT sasl.mechanism.inter.broker.protocol = PLAIN kafka_server_jaas.conf KafkaServer { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"admin\" password=\"admin_pass\" user_admin=\"admin_pass\" user_alice=\"alice_pass\"; }; username \u548c password \u662f broker \u4e0e\u5176\u4ed6 broker \u5efa\u7acb\u8fde\u63a5\u65f6\u6240\u4f7f\u7528\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801 \u914d\u7f6e\u4e2d\u7684 user_admin=\"admin_pass\" \u7684\u89c4\u5219\u662f user_<username>=\"<password>\" \uff0c\u5c31\u662f\u8bf4\u914d\u7f6e\u4e86 2 \u4e2a\u7528\u6237 admin \u548c alice \uff0c\u5bc6\u7801\u5206\u522b\u662f admin_pass \u548c alice_pass \uff0cbroker \u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff0c\u5305\u62ec\u6765\u81ea\u5176\u4ed6 broker \u7684\u8fde\u63a5 \u8fd0\u884c kafka \u670d\u52a1\u65f6\uff0c\u9700\u8981\u5c06 JAAS \u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf \u53ef\u4ee5\u4fee\u6539 bin/kafka-server-start.sh \uff0c\u589e\u52a0\u4ee5\u4e0b\u5185\u5bb9: if [[ -f /usr/local/kafka/config/kafka_server_jaas.conf ]] ; then export KAFKA_OPTS = '-Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf' fi \u5ba2\u6237\u7aef\u914d\u7f6e \u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\u9700\u8981\u914d\u7f6e kafka_client_jaas.conf \u6587\u4ef6 KafkaClient { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"alice\" password=\"alice_pass\"; }; \u8fd0\u884c\u5ba2\u6237\u7aef\u65f6 kafka_client_jaas.conf \u6587\u4ef6\u4f4d\u7f6e\u9700\u8981 \u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf \u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf KAFKA_OPTS : export KAFKA_OPTS='-Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf' \u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u4f1a\u88ab kafka-run-class.sh \u811a\u672c\u8bfb\u53d6\u5e76\u5728\u8fd0\u884c Java \u65f6\u5f53\u4f5c JVM \u53c2\u6570\u4f20\u5165 \u589e\u52a0 client.properties \u6587\u4ef6\uff1a security.protocol = SASL_PLAINTEXT sasl.mechanism = PLAIN \u8fd0\u884c kafka-console-consumer.sh kafka-console-consumer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --from-beginning --consumer.config client.properties \u751f\u4ea7\u8005\u540c\u7406\uff1a kafka-console-producer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --producer.config client.properties","title":"3.1 PLAIN Mechanisms"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/1-PLAIN%20mechanisms/#31-plain-mechanisms","text":"","title":"3.1 PLAIN mechanisms"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/1-PLAIN%20mechanisms/#broker","text":"","title":"broker \u914d\u7f6e"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/1-PLAIN%20mechanisms/#serverproperties","text":"\u76d1\u542c\u5730\u5740\uff0c\u8fd9\u91cc\u540c\u65f6\u4f7f\u7528 SASL_PLAINTEXT \u4e0e SASL_SSL \uff0c\u8981\u6ce8\u610f\u4f7f\u7528 SASL_SSL \u9700\u8981\u914d\u7f6e SSL\uff0c\u4e0e\u4e4b\u524d\u4e00\u81f4\uff0c\u8fd9\u91cc\u4e0d\u505a\u8bf4\u660e listeners = SASL_PLAINTEXT://:9094,SASL_SSL://:9095 advertised.listeners = SASL_PLAINTEXT://192.168.16.5:9094,SASL_SSL://180.76.140.179:9095 SASL \u4f7f\u7528\u7684\u673a\u5236\uff1a sasl.enabled.mechanisms = PLAIN # \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2a # sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512 broker \u4e4b\u95f4\u5982\u679c\u8981\u4f7f\u7528 SASL \u8fdb\u884c\u901a\u4fe1\uff0c\u9700\u8981\u8bbe\u7f6e: security.inter.broker.protocol = SASL_PLAINTEXT sasl.mechanism.inter.broker.protocol = PLAIN","title":"server.properties"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/1-PLAIN%20mechanisms/#kafka_server_jaasconf","text":"KafkaServer { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"admin\" password=\"admin_pass\" user_admin=\"admin_pass\" user_alice=\"alice_pass\"; }; username \u548c password \u662f broker \u4e0e\u5176\u4ed6 broker \u5efa\u7acb\u8fde\u63a5\u65f6\u6240\u4f7f\u7528\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801 \u914d\u7f6e\u4e2d\u7684 user_admin=\"admin_pass\" \u7684\u89c4\u5219\u662f user_<username>=\"<password>\" \uff0c\u5c31\u662f\u8bf4\u914d\u7f6e\u4e86 2 \u4e2a\u7528\u6237 admin \u548c alice \uff0c\u5bc6\u7801\u5206\u522b\u662f admin_pass \u548c alice_pass \uff0cbroker \u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff0c\u5305\u62ec\u6765\u81ea\u5176\u4ed6 broker \u7684\u8fde\u63a5 \u8fd0\u884c kafka \u670d\u52a1\u65f6\uff0c\u9700\u8981\u5c06 JAAS \u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf \u53ef\u4ee5\u4fee\u6539 bin/kafka-server-start.sh \uff0c\u589e\u52a0\u4ee5\u4e0b\u5185\u5bb9: if [[ -f /usr/local/kafka/config/kafka_server_jaas.conf ]] ; then export KAFKA_OPTS = '-Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf' fi","title":"kafka_server_jaas.conf"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/1-PLAIN%20mechanisms/#_1","text":"\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\u9700\u8981\u914d\u7f6e kafka_client_jaas.conf \u6587\u4ef6 KafkaClient { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"alice\" password=\"alice_pass\"; }; \u8fd0\u884c\u5ba2\u6237\u7aef\u65f6 kafka_client_jaas.conf \u6587\u4ef6\u4f4d\u7f6e\u9700\u8981 \u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf \u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf KAFKA_OPTS : export KAFKA_OPTS='-Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf' \u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u4f1a\u88ab kafka-run-class.sh \u811a\u672c\u8bfb\u53d6\u5e76\u5728\u8fd0\u884c Java \u65f6\u5f53\u4f5c JVM \u53c2\u6570\u4f20\u5165 \u589e\u52a0 client.properties \u6587\u4ef6\uff1a security.protocol = SASL_PLAINTEXT sasl.mechanism = PLAIN \u8fd0\u884c kafka-console-consumer.sh kafka-console-consumer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --from-beginning --consumer.config client.properties \u751f\u4ea7\u8005\u540c\u7406\uff1a kafka-console-producer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --producer.config client.properties","title":"\u5ba2\u6237\u7aef\u914d\u7f6e"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/2-SCRAM%20mechanisms/","text":"3.2 SCRAM mechanisms Salted Challenge Response Authentication Mechanism \u4e0e PLAIN \u673a\u5236\u7c7b\u4f3c\uff0c\u4f46\u5728 zookeeper \u4e2d\u5b58\u50a8\u7528\u6237\u4fe1\u606f(\u9ed8\u8ba4\u5728 /config/users \u8282\u70b9\u4e0b)\uff0c\u56e0\u6b64\u80fd\u591f\u52a8\u6001\u6dfb\u52a0\u7528\u6237\uff0c\u5bf9\u5bc6\u7801\u4f7f\u7528 sha \u8fdb\u884c\u52a0\u5bc6 broker \u914d\u7f6e \u521b\u5efa SCRAM \u8bc1\u4e66\uff08\u8bbe\u7f6e\u7528\u6237\u540d\u3001\u5bc6\u7801\uff09 export ZK_CONNECT=\"$(hostname):2181\" \u589e\u52a0\u7528\u6237\uff1a kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --add-config 'SCRAM-SHA-256=[iterations=8192,password=alice_pass],SCRAM-SHA-512=[password=alice_pass]' --entity-type users --entity-name alice kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --add-config 'SCRAM-SHA-256=[password=admin_pass],SCRAM-SHA-512=[password=admin_pass]' --entity-type users --entity-name admin \u63cf\u8ff0\u7528\u6237\uff1a kafka-configs.sh --zookeeper ${ZK_CONNECT} --describe --entity-type users --entity-name alice \u5220\u9664\u7528\u6237\uff1a kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --delete-config 'SCRAM-SHA-512' --entity-type users --entity-name alice kafka_server_jaas.conf \u5982\u679c broker \u4e4b\u95f4\u901a\u8fc7 SASL \u901a\u4fe1\uff0c\u5fc5\u987b\u8bbe\u7f6e broker \u4e0e\u5176\u4ed6 broker \u8fdb\u884c\u8fde\u63a5\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801 \u589e\u52a0 kafka_server_jaas.conf \u6587\u4ef6\uff1a KafkaServer { org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"admin_pass\"; }; \u8fd0\u884c kafka \u670d\u52a1\u65f6\uff0c\u9700\u8981\u5c06 JAAS \u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf \u53ef\u4ee5\u4fee\u6539 bin/kafka-server-start.sh \uff0c\u589e\u52a0\u4ee5\u4e0b\u5185\u5bb9: if [[ -f /usr/local/kafka/config/kafka_server_jaas.conf ]] ; then export KAFKA_OPTS = '-Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf' fi server.properties \u76d1\u542c\u5730\u5740\uff0c\u8fd9\u91cc\u540c\u65f6\u4f7f\u7528 SASL_PLAINTEXT \u4e0e SASL_SSL \uff0c\u8981\u6ce8\u610f\u4f7f\u7528 SASL_SSL \u9700\u8981\u914d\u7f6e SSL\uff0c\u4e0e\u4e4b\u524d\u4e00\u81f4\uff0c\u8fd9\u91cc\u4e0d\u505a\u8bf4\u660e listeners = SASL_PLAINTEXT://:9094,SASL_SSL://:9095 advertised.listeners = SASL_PLAINTEXT://192.168.16.5:9094,SASL_SSL://180.76.140.179:9095 SASL \u4f7f\u7528\u7684\u673a\u5236\uff1a sasl.enabled.mechanisms = SCRAM-SHA-256 # \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2a # sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512 broker \u4e4b\u95f4\u5982\u679c\u8981\u4f7f\u7528 SASL \u8fdb\u884c\u901a\u4fe1\uff0c\u9700\u8981\u8bbe\u7f6e: # SASL_PLAINTEXT \u6216\u8005 SASL_SSL security.inter.broker.protocol = SASL_PLAINTEXT # SCRAM-SHA-256 \u6216\u8005 SCRAM-SHA-512 sasl.mechanism.inter.broker.protocol = SCRAM-SHA-256 \u5ba2\u6237\u7aef\u914d\u7f6e \u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\u9700\u8981\u914d\u7f6e kafka_client_jaas.conf \u6587\u4ef6 KafkaClient { org.apache.kafka.common.security.scram.ScramLoginModule required username=\"alice\" password=\"alice_pass\"; }; \u8fd0\u884c\u5ba2\u6237\u7aef\u65f6 kafka_client_jaas.conf \u6587\u4ef6\u4f4d\u7f6e\u9700\u8981 \u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf \u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf KAFKA_OPTS : export KAFKA_OPTS='-Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf' \u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u4f1a\u88ab kafka-run-class.sh \u811a\u672c\u8bfb\u53d6\u5e76\u5728\u8fd0\u884c Java \u65f6\u5f53\u4f5c JVM \u53c2\u6570\u4f20\u5165 \u589e\u52a0 client.properties \u6587\u4ef6\uff1a security.protocol = SASL_PLAINTEXT ## \u5982\u679c\u4f7f\u7528 SASL_SSL\uff0c\u9700\u8981\u540c\u65f6\u914d\u7f6e SSL # security.protocol=SASL_SSL # # ssl.truststore.location=/etc/kafka/client.truststore.jks # ssl.truststore.password=kafka1234 # ssl.endpoint.identification.algorithm= # ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 # ssl.protocol = TLSv1.2 sasl.mechanism = SCRAM-SHA-512 \u8fd0\u884c kafka-console-consumer.sh kafka-console-consumer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --from-beginning --consumer.config client.properties \u751f\u4ea7\u8005\u540c\u7406\uff1a kafka-console-producer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --producer.config client.properties","title":"3.2 SCRAM Mechanisms"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/2-SCRAM%20mechanisms/#32-scram-mechanisms","text":"Salted Challenge Response Authentication Mechanism \u4e0e PLAIN \u673a\u5236\u7c7b\u4f3c\uff0c\u4f46\u5728 zookeeper \u4e2d\u5b58\u50a8\u7528\u6237\u4fe1\u606f(\u9ed8\u8ba4\u5728 /config/users \u8282\u70b9\u4e0b)\uff0c\u56e0\u6b64\u80fd\u591f\u52a8\u6001\u6dfb\u52a0\u7528\u6237\uff0c\u5bf9\u5bc6\u7801\u4f7f\u7528 sha \u8fdb\u884c\u52a0\u5bc6","title":"3.2 SCRAM mechanisms"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/2-SCRAM%20mechanisms/#broker","text":"","title":"broker \u914d\u7f6e"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/2-SCRAM%20mechanisms/#scram","text":"export ZK_CONNECT=\"$(hostname):2181\" \u589e\u52a0\u7528\u6237\uff1a kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --add-config 'SCRAM-SHA-256=[iterations=8192,password=alice_pass],SCRAM-SHA-512=[password=alice_pass]' --entity-type users --entity-name alice kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --add-config 'SCRAM-SHA-256=[password=admin_pass],SCRAM-SHA-512=[password=admin_pass]' --entity-type users --entity-name admin \u63cf\u8ff0\u7528\u6237\uff1a kafka-configs.sh --zookeeper ${ZK_CONNECT} --describe --entity-type users --entity-name alice \u5220\u9664\u7528\u6237\uff1a kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --delete-config 'SCRAM-SHA-512' --entity-type users --entity-name alice","title":"\u521b\u5efa SCRAM \u8bc1\u4e66\uff08\u8bbe\u7f6e\u7528\u6237\u540d\u3001\u5bc6\u7801\uff09"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/2-SCRAM%20mechanisms/#kafka_server_jaasconf","text":"\u5982\u679c broker \u4e4b\u95f4\u901a\u8fc7 SASL \u901a\u4fe1\uff0c\u5fc5\u987b\u8bbe\u7f6e broker \u4e0e\u5176\u4ed6 broker \u8fdb\u884c\u8fde\u63a5\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801 \u589e\u52a0 kafka_server_jaas.conf \u6587\u4ef6\uff1a KafkaServer { org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"admin_pass\"; }; \u8fd0\u884c kafka \u670d\u52a1\u65f6\uff0c\u9700\u8981\u5c06 JAAS \u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf \u53ef\u4ee5\u4fee\u6539 bin/kafka-server-start.sh \uff0c\u589e\u52a0\u4ee5\u4e0b\u5185\u5bb9: if [[ -f /usr/local/kafka/config/kafka_server_jaas.conf ]] ; then export KAFKA_OPTS = '-Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf' fi","title":"kafka_server_jaas.conf"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/2-SCRAM%20mechanisms/#serverproperties","text":"\u76d1\u542c\u5730\u5740\uff0c\u8fd9\u91cc\u540c\u65f6\u4f7f\u7528 SASL_PLAINTEXT \u4e0e SASL_SSL \uff0c\u8981\u6ce8\u610f\u4f7f\u7528 SASL_SSL \u9700\u8981\u914d\u7f6e SSL\uff0c\u4e0e\u4e4b\u524d\u4e00\u81f4\uff0c\u8fd9\u91cc\u4e0d\u505a\u8bf4\u660e listeners = SASL_PLAINTEXT://:9094,SASL_SSL://:9095 advertised.listeners = SASL_PLAINTEXT://192.168.16.5:9094,SASL_SSL://180.76.140.179:9095 SASL \u4f7f\u7528\u7684\u673a\u5236\uff1a sasl.enabled.mechanisms = SCRAM-SHA-256 # \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2a # sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512 broker \u4e4b\u95f4\u5982\u679c\u8981\u4f7f\u7528 SASL \u8fdb\u884c\u901a\u4fe1\uff0c\u9700\u8981\u8bbe\u7f6e: # SASL_PLAINTEXT \u6216\u8005 SASL_SSL security.inter.broker.protocol = SASL_PLAINTEXT # SCRAM-SHA-256 \u6216\u8005 SCRAM-SHA-512 sasl.mechanism.inter.broker.protocol = SCRAM-SHA-256","title":"server.properties"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/2-SCRAM%20mechanisms/#_1","text":"\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\u9700\u8981\u914d\u7f6e kafka_client_jaas.conf \u6587\u4ef6 KafkaClient { org.apache.kafka.common.security.scram.ScramLoginModule required username=\"alice\" password=\"alice_pass\"; }; \u8fd0\u884c\u5ba2\u6237\u7aef\u65f6 kafka_client_jaas.conf \u6587\u4ef6\u4f4d\u7f6e\u9700\u8981 \u4f5c\u4e3a JVM \u53c2\u6570\uff1a -Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf \u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf KAFKA_OPTS : export KAFKA_OPTS='-Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf' \u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u4f1a\u88ab kafka-run-class.sh \u811a\u672c\u8bfb\u53d6\u5e76\u5728\u8fd0\u884c Java \u65f6\u5f53\u4f5c JVM \u53c2\u6570\u4f20\u5165 \u589e\u52a0 client.properties \u6587\u4ef6\uff1a security.protocol = SASL_PLAINTEXT ## \u5982\u679c\u4f7f\u7528 SASL_SSL\uff0c\u9700\u8981\u540c\u65f6\u914d\u7f6e SSL # security.protocol=SASL_SSL # # ssl.truststore.location=/etc/kafka/client.truststore.jks # ssl.truststore.password=kafka1234 # ssl.endpoint.identification.algorithm= # ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 # ssl.protocol = TLSv1.2 sasl.mechanism = SCRAM-SHA-512 \u8fd0\u884c kafka-console-consumer.sh kafka-console-consumer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --from-beginning --consumer.config client.properties \u751f\u4ea7\u8005\u540c\u7406\uff1a kafka-console-producer.sh --bootstrap-server 192.168.16.5:9094 --topic __test --producer.config client.properties","title":"\u5ba2\u6237\u7aef\u914d\u7f6e"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/","text":"3.3 GSSAPI mechanisms Kerberos principal principal \u8868\u793a\u8ba4\u8bc1\u5b9e\u4f53\uff0c\u7531 3 \u90e8\u5206\u7ec4\u6210( name/instance@realm )\uff1a name/primary instance realm keytab: \u662f\u4e00\u4e2a\u5b58\u50a8\u5728 client \u6216 service \u7aef\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5305\u542b\u4e86 kerberos principal \u548c\u8be5 principal \u7684 master key ticket cache: client \u4e0e kdc \u4ea4\u4e92\u5b8c\u6210\u540e\uff0c\u5305\u542b\u8eab\u4efd\u8ba4\u8bc1\u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u77ed\u671f\u6709\u6548\uff0c\u9700\u8981\u4e0d\u65ad renew kdc/client/service kdc \u6570\u636e\u5e93\u5b58\u50a8\u4e86\u5b83\u6240\u6709\u7528\u6237\u7684 entry\uff0c\u6211\u4eec\u7528 principal \u6765\u5f15\u7528\u4e00\u4e2a entry broker \u914d\u7f6e \u521b\u5efa principal \u5728 kdc \u4e2d\u4e3a\u6bcf\u4e2a broker \u521b\u5efa principal\uff0c\u5e76\u751f\u6210 keytab \u6587\u4ef6 # \u6dfb\u52a0 principal kadmin.local -q 'addprinc -randkey kafka/{hostname}@{REALM}' # \u751f\u6210 keytab \u6587\u4ef6 kadmin.local -q \"ktadd -k /etc/security/keytabs/{keytabname}.keytab kafka/{hostname}@{REALM}\" kafka_server_jaas.conf \u9700\u8981\u6ce8\u610f\u6bcf\u4e2a broker \u4f7f\u7528\u81ea\u5df1\u7684 principal\uff0cJAAS \u6587\u4ef6\u4e2d keyTab \u4e0e principal \u5e94\u8be5\u6bcf\u4e2a broker \u90fd\u4e0d\u540c\u3002 KafkaServer { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab=\"/etc/security/keytabs/kafka_server.keytab\" principal=\"kafka/kafka1.hostname.com@EXAMPLE.COM\"; }; // Zookeeper client authentication Client { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab=\"/etc/security/keytabs/kafka_server.keytab\" principal=\"kafka/kafka1.hostname.com@EXAMPLE.COM\"; }; \u5c06 JAAS \u548c krb5 \u6587\u4ef6\u4f4d\u7f6e\uff08\u53ef\u9009\u7684\uff09\u4f5c\u4e3a JVM \u53c2\u6570 -Djava.security.krb5.conf = /etc/kafka/krb5.conf -Djava.security.auth.login.config = /etc/kafka/kafka_server_jaas.conf server.properties \u76d1\u542c\u5730\u5740\uff1a listeners = SASL_PLAINTEXT://host.name:port SASL \u4f7f\u7528\u7684\u673a\u5236: sasl.enabled.mechanisms = GSSAPI \u914d\u7f6e\u670d\u52a1\u5668\u540d\u79f0\uff0c\u5e94\u4e0e broker \u7684 principal name \u5339\u914d sasl.kerberos.service.name = kafka broker \u4e4b\u95f4\u5982\u679c\u8981\u4f7f\u7528 SASL \u8fdb\u884c\u901a\u4fe1\uff0c\u9700\u8981\u8bbe\u7f6e\uff1a security.inter.broker.protocol = SASL_PLAINTEXT sasl.mechanism.inter.broker.protocol = GSSAPI \u5ba2\u6237\u7aef\u914d\u7f6e \u521b\u5efa principal \u5ba2\u6237\u7aef\u9700\u8981\u5728 kdc \u4e2d\u521b\u5efa\u81ea\u5df1\u7684 principal client.properties security.protocol = SASL_PLAINTEXT sasl.kerberos.service.name = kafka sasl.mechanism = GSSAPI sasl.jaas.config \u53ef\u4ee5\u8bbe\u7f6e sasl.jaas.config \u53c2\u6570\u6307\u5b9a keytab \u6587\u4ef6\u548c principal sasl.jaas.config = com.sun.security.auth.module.Krb5LoginModule required \\ useKeyTab=true \\ storeKey=true \\ keyTab=\"/etc/security/keytabs/kafka_client.keytab\" \\ principal=\"kafka-client-1@EXAMPLE.COM\"; \u5bf9\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5982 kafka-console-consumer \u6216\u8005 kafka-console-producer \uff0c\u4f7f\u7528 kinit \u4e4b\u540e\uff0c\u5982\u4e0b\uff1a kinit -k -t /etc/security/keytabs/kafka_client.keytab kafka-client-1@EXAMPLE.COM \u53ef\u4ee5\u4f7f\u7528 useTicketCache=true sasl.jaas.config = com.sun.security.auth.module.Krb5LoginModule required \\ useTicketCache=true; kafka_client_jaas.conf \u53ef\u7528\u901a\u8fc7\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\u4f5c\u4e3a JVM \u53c2\u6570\uff0c\u6587\u4ef6\u4e2d KafkaClient section \u63d0\u4f9b\u8ba4\u8bc1\u914d\u7f6e\uff1a KafkaClient { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true KeyTab=\"/home/hduser/keytabs/kafka.service.keytab\" principal=\"kafka/node8@amanp.uom\" useTicketCache=false serviceName=kafka; }; Client { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true KeyTab=\"/home/hduser/keytabs/kafka.service.keytab\" principal=\"kafka/node8@amanp.com\" useTicketCache=false serviceName=kafka; }; \u4f7f\u7528 kinit \u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528 useTicketCache=true KafkaClient { com.sun.security.auth.module.Krb5LoginModule required useTicketCache=true renewTicket=true serviceName=\"kafka\"; }; \u5c06 JAAS \u548c krb5 \u6587\u4ef6\u4f4d\u7f6e\uff08\u53ef\u9009\u7684\uff09\u4f5c\u4e3a JVM \u53c2\u6570 -Djava.security.krb5.conf = /etc/kafka/krb5.conf -Djava.security.auth.login.config = /tmp/kafka_client_jaas.conf","title":"3.3 GSSAPI Mechanisms"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#33-gssapi-mechanisms","text":"","title":"3.3 GSSAPI mechanisms"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#kerberos","text":"","title":"Kerberos"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#principal","text":"principal \u8868\u793a\u8ba4\u8bc1\u5b9e\u4f53\uff0c\u7531 3 \u90e8\u5206\u7ec4\u6210( name/instance@realm )\uff1a name/primary instance realm keytab: \u662f\u4e00\u4e2a\u5b58\u50a8\u5728 client \u6216 service \u7aef\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5305\u542b\u4e86 kerberos principal \u548c\u8be5 principal \u7684 master key ticket cache: client \u4e0e kdc \u4ea4\u4e92\u5b8c\u6210\u540e\uff0c\u5305\u542b\u8eab\u4efd\u8ba4\u8bc1\u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u77ed\u671f\u6709\u6548\uff0c\u9700\u8981\u4e0d\u65ad renew","title":"principal"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#kdcclientservice","text":"kdc \u6570\u636e\u5e93\u5b58\u50a8\u4e86\u5b83\u6240\u6709\u7528\u6237\u7684 entry\uff0c\u6211\u4eec\u7528 principal \u6765\u5f15\u7528\u4e00\u4e2a entry","title":"kdc/client/service"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#broker","text":"","title":"broker \u914d\u7f6e"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#principal_1","text":"\u5728 kdc \u4e2d\u4e3a\u6bcf\u4e2a broker \u521b\u5efa principal\uff0c\u5e76\u751f\u6210 keytab \u6587\u4ef6 # \u6dfb\u52a0 principal kadmin.local -q 'addprinc -randkey kafka/{hostname}@{REALM}' # \u751f\u6210 keytab \u6587\u4ef6 kadmin.local -q \"ktadd -k /etc/security/keytabs/{keytabname}.keytab kafka/{hostname}@{REALM}\"","title":"\u521b\u5efa principal"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#kafka_server_jaasconf","text":"\u9700\u8981\u6ce8\u610f\u6bcf\u4e2a broker \u4f7f\u7528\u81ea\u5df1\u7684 principal\uff0cJAAS \u6587\u4ef6\u4e2d keyTab \u4e0e principal \u5e94\u8be5\u6bcf\u4e2a broker \u90fd\u4e0d\u540c\u3002 KafkaServer { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab=\"/etc/security/keytabs/kafka_server.keytab\" principal=\"kafka/kafka1.hostname.com@EXAMPLE.COM\"; }; // Zookeeper client authentication Client { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab=\"/etc/security/keytabs/kafka_server.keytab\" principal=\"kafka/kafka1.hostname.com@EXAMPLE.COM\"; };","title":"kafka_server_jaas.conf"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#jaas-krb5-jvm","text":"-Djava.security.krb5.conf = /etc/kafka/krb5.conf -Djava.security.auth.login.config = /etc/kafka/kafka_server_jaas.conf","title":"\u5c06 JAAS \u548c krb5 \u6587\u4ef6\u4f4d\u7f6e\uff08\u53ef\u9009\u7684\uff09\u4f5c\u4e3a JVM \u53c2\u6570"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#serverproperties","text":"\u76d1\u542c\u5730\u5740\uff1a listeners = SASL_PLAINTEXT://host.name:port SASL \u4f7f\u7528\u7684\u673a\u5236: sasl.enabled.mechanisms = GSSAPI \u914d\u7f6e\u670d\u52a1\u5668\u540d\u79f0\uff0c\u5e94\u4e0e broker \u7684 principal name \u5339\u914d sasl.kerberos.service.name = kafka broker \u4e4b\u95f4\u5982\u679c\u8981\u4f7f\u7528 SASL \u8fdb\u884c\u901a\u4fe1\uff0c\u9700\u8981\u8bbe\u7f6e\uff1a security.inter.broker.protocol = SASL_PLAINTEXT sasl.mechanism.inter.broker.protocol = GSSAPI","title":"server.properties"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#_1","text":"","title":"\u5ba2\u6237\u7aef\u914d\u7f6e"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#principal_2","text":"\u5ba2\u6237\u7aef\u9700\u8981\u5728 kdc \u4e2d\u521b\u5efa\u81ea\u5df1\u7684 principal","title":"\u521b\u5efa principal"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#clientproperties","text":"security.protocol = SASL_PLAINTEXT sasl.kerberos.service.name = kafka sasl.mechanism = GSSAPI","title":"client.properties"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#sasljaasconfig","text":"\u53ef\u4ee5\u8bbe\u7f6e sasl.jaas.config \u53c2\u6570\u6307\u5b9a keytab \u6587\u4ef6\u548c principal sasl.jaas.config = com.sun.security.auth.module.Krb5LoginModule required \\ useKeyTab=true \\ storeKey=true \\ keyTab=\"/etc/security/keytabs/kafka_client.keytab\" \\ principal=\"kafka-client-1@EXAMPLE.COM\"; \u5bf9\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5982 kafka-console-consumer \u6216\u8005 kafka-console-producer \uff0c\u4f7f\u7528 kinit \u4e4b\u540e\uff0c\u5982\u4e0b\uff1a kinit -k -t /etc/security/keytabs/kafka_client.keytab kafka-client-1@EXAMPLE.COM \u53ef\u4ee5\u4f7f\u7528 useTicketCache=true sasl.jaas.config = com.sun.security.auth.module.Krb5LoginModule required \\ useTicketCache=true;","title":"sasl.jaas.config"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#kafka_client_jaasconf","text":"\u53ef\u7528\u901a\u8fc7\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\u4f5c\u4e3a JVM \u53c2\u6570\uff0c\u6587\u4ef6\u4e2d KafkaClient section \u63d0\u4f9b\u8ba4\u8bc1\u914d\u7f6e\uff1a KafkaClient { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true KeyTab=\"/home/hduser/keytabs/kafka.service.keytab\" principal=\"kafka/node8@amanp.uom\" useTicketCache=false serviceName=kafka; }; Client { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true KeyTab=\"/home/hduser/keytabs/kafka.service.keytab\" principal=\"kafka/node8@amanp.com\" useTicketCache=false serviceName=kafka; }; \u4f7f\u7528 kinit \u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528 useTicketCache=true KafkaClient { com.sun.security.auth.module.Krb5LoginModule required useTicketCache=true renewTicket=true serviceName=\"kafka\"; };","title":"kafka_client_jaas.conf"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/3-GSSAPI%20mechanisms/#jaas-krb5-jvm_1","text":"-Djava.security.krb5.conf = /etc/kafka/krb5.conf -Djava.security.auth.login.config = /tmp/kafka_client_jaas.conf","title":"\u5c06 JAAS \u548c krb5 \u6587\u4ef6\u4f4d\u7f6e\uff08\u53ef\u9009\u7684\uff09\u4f5c\u4e3a JVM \u53c2\u6570"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/","text":"3.4 JAAS \u914d\u7f6e\u65b9\u5f0f Kafka \u4f7f\u7528 JAAS \u8fdb\u884c SASL \u914d\u7f6e\u3002 broker \u7aef broker \u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\uff08 -Djava.security.auth.login.config= \uff09\u6216\u8005 sasl.jaas.config \u914d\u7f6e JAAS\u3002 JAAS \u6587\u4ef6 JAAS \u6587\u4ef6\u4e2d KafkaServer section \u63d0\u4f9b broker \u7aef\u7684 SASL \u914d\u7f6e\u3002\u5982\u679c\u6709\u591a\u4e2a SASL listener\uff0c\u53ef\u4ee5\u5728 section name \u4e4b\u524d\u589e\u52a0 listener name \u7684\u5c0f\u5199\u62fc\u5199\u4f5c\u4e3a\u524d\u7f00\uff0c\u4ee5\u6b64\u533a\u5206\u4e0d\u540c listener \u7684\u914d\u7f6e\uff0c\u4f8b\u5982 sasl_ssl.KafkaServer \u3002 JAAS \u6587\u4ef6\u4e2d Client section \u63d0\u4f9b\u8fde\u63a5 zookeeper \u670d\u52a1\u7684 SASL \u914d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728 system property \u6307\u5b9a zookeeper.sasl.clientconfig \u6307\u5b9a section name\uff0c\u4f8b\u5982 -Dzookeeper.sasl.clientconfig=ZkClient \u3002 KafkaServer { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"admin\" password=\"admin_pass\" user_admin=\"admin_pass\" }; // \u8fde\u63a5 zookeeper Client { org.apache.zookeeper.server.auth.DigestLoginModule required username=\"zk_admin\" password=\"zk_admin_pass\"; }; sasl.jaas.config \u914d\u7f6e \u53e6\u5916\uff0cbroker \u540c\u6837\u53ef\u4ee5\u4f7f\u7528 sasl.jaas.config \u914d\u7f6e\u4ee3\u66ff JAAS \u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u9879\u914d\u7f6e\u7684\u683c\u5f0f\u4e3a listener.name.{listenerName}.{saslMechanism}.sasl.jaas.config \uff0c\u5982\u679c\u6709\u591a\u79cd saslMechanism\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u914d\u7f6e\u8fdb\u884c\u533a\u5206\uff0c\u4f8b\u5982\uff1a listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required \\ username=\"admin\" \\ password=\"admin-secret\"; listener.name.sasl_ssl.plain.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required \\ username=\"admin\" \\ password=\"admin-secret\" \\ user_admin=\"admin-secret\" \\ user_alice=\"alice-secret\"; \u4f18\u5148\u7ea7 broker SASL 3 \u79cd\u914d\u7f6e\u65b9\u5f0f\u7684\u4f18\u5148\u7ea7\u4e3a\uff1a \u9996\u5148\u67e5\u770b broker \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 listener.name.{listenerName}.{saslMechanism}.sasl.jaas.config \u914d\u7f6e \u5982\u679c\u6ca1\u6709\uff0c\u5219\u67e5\u770b JAAS \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 {listenerName}.KafkaServer secion \u5982\u679c\u6ca1\u6709\uff0c\u5219\u67e5\u770b JAAS \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 KafkaServer section \u8fde\u63a5 zookeeper \u7684\u914d\u7f6e\u53ea\u80fd\u653e\u5728 JAAS \u914d\u7f6e\u6587\u4ef6\u4e2d\u3002 client client \u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\uff08 -Djava.security.auth.login.config= \uff09\u6216\u8005 sasl.jaas.config \u914d\u7f6e JAAS\u3002 JAAS \u6587\u4ef6 JAAS \u6587\u4ef6\u4e2d KafkaClient section \u63d0\u4f9b client \u7aef\u7684 JAAS \u914d\u7f6e\uff0c\u542f\u52a8 client \u65f6\u901a\u8fc7 JVM \u53c2\u6570\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\uff0c\u4f8b\u5982 -Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf sasl.jaas.config \u914d\u7f6e sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule sufficient username='admin' password='admin-secret';","title":"3.4 JAAS \u914d\u7f6e\u65b9\u5f0f"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#34-jaas","text":"Kafka \u4f7f\u7528 JAAS \u8fdb\u884c SASL \u914d\u7f6e\u3002","title":"3.4 JAAS \u914d\u7f6e\u65b9\u5f0f"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#broker","text":"broker \u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\uff08 -Djava.security.auth.login.config= \uff09\u6216\u8005 sasl.jaas.config \u914d\u7f6e JAAS\u3002","title":"broker \u7aef"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#jaas","text":"JAAS \u6587\u4ef6\u4e2d KafkaServer section \u63d0\u4f9b broker \u7aef\u7684 SASL \u914d\u7f6e\u3002\u5982\u679c\u6709\u591a\u4e2a SASL listener\uff0c\u53ef\u4ee5\u5728 section name \u4e4b\u524d\u589e\u52a0 listener name \u7684\u5c0f\u5199\u62fc\u5199\u4f5c\u4e3a\u524d\u7f00\uff0c\u4ee5\u6b64\u533a\u5206\u4e0d\u540c listener \u7684\u914d\u7f6e\uff0c\u4f8b\u5982 sasl_ssl.KafkaServer \u3002 JAAS \u6587\u4ef6\u4e2d Client section \u63d0\u4f9b\u8fde\u63a5 zookeeper \u670d\u52a1\u7684 SASL \u914d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728 system property \u6307\u5b9a zookeeper.sasl.clientconfig \u6307\u5b9a section name\uff0c\u4f8b\u5982 -Dzookeeper.sasl.clientconfig=ZkClient \u3002 KafkaServer { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"admin\" password=\"admin_pass\" user_admin=\"admin_pass\" }; // \u8fde\u63a5 zookeeper Client { org.apache.zookeeper.server.auth.DigestLoginModule required username=\"zk_admin\" password=\"zk_admin_pass\"; };","title":"JAAS \u6587\u4ef6"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#sasljaasconfig","text":"\u53e6\u5916\uff0cbroker \u540c\u6837\u53ef\u4ee5\u4f7f\u7528 sasl.jaas.config \u914d\u7f6e\u4ee3\u66ff JAAS \u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u9879\u914d\u7f6e\u7684\u683c\u5f0f\u4e3a listener.name.{listenerName}.{saslMechanism}.sasl.jaas.config \uff0c\u5982\u679c\u6709\u591a\u79cd saslMechanism\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u914d\u7f6e\u8fdb\u884c\u533a\u5206\uff0c\u4f8b\u5982\uff1a listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required \\ username=\"admin\" \\ password=\"admin-secret\"; listener.name.sasl_ssl.plain.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required \\ username=\"admin\" \\ password=\"admin-secret\" \\ user_admin=\"admin-secret\" \\ user_alice=\"alice-secret\";","title":"sasl.jaas.config \u914d\u7f6e"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#_1","text":"broker SASL 3 \u79cd\u914d\u7f6e\u65b9\u5f0f\u7684\u4f18\u5148\u7ea7\u4e3a\uff1a \u9996\u5148\u67e5\u770b broker \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 listener.name.{listenerName}.{saslMechanism}.sasl.jaas.config \u914d\u7f6e \u5982\u679c\u6ca1\u6709\uff0c\u5219\u67e5\u770b JAAS \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 {listenerName}.KafkaServer secion \u5982\u679c\u6ca1\u6709\uff0c\u5219\u67e5\u770b JAAS \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 KafkaServer section \u8fde\u63a5 zookeeper \u7684\u914d\u7f6e\u53ea\u80fd\u653e\u5728 JAAS \u914d\u7f6e\u6587\u4ef6\u4e2d\u3002","title":"\u4f18\u5148\u7ea7"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#client","text":"client \u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\uff08 -Djava.security.auth.login.config= \uff09\u6216\u8005 sasl.jaas.config \u914d\u7f6e JAAS\u3002","title":"client"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#jaas_1","text":"JAAS \u6587\u4ef6\u4e2d KafkaClient section \u63d0\u4f9b client \u7aef\u7684 JAAS \u914d\u7f6e\uff0c\u542f\u52a8 client \u65f6\u901a\u8fc7 JVM \u53c2\u6570\u6307\u5b9a JAAS \u6587\u4ef6\u4f4d\u7f6e\uff0c\u4f8b\u5982 -Djava.security.auth.login.config=/etc/kafka/kafka_client_jaas.conf","title":"JAAS \u6587\u4ef6"},{"location":"3-SASL%20protocol%20%E6%94%AF%E6%8C%81/4-JAAS%20config/#sasljaasconfig_1","text":"sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule sufficient username='admin' password='admin-secret';","title":"sasl.jaas.config \u914d\u7f6e"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/","text":"4 \u6743\u9650\u63a7\u5236 ACL\uff08Access Control List \u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff09 Kafka acl \u89c4\u5219\u5b9a\u4e49\u6a21\u5f0f\u4e3a\uff1a Principal `P` is `[Allowed/Denied]` Operation `O` From Host `H` on any Resource `R` matching ResourcePattern `RP` \u53c2\u8003 https://kafka.apache.org/documentation/#security_authz https://www.orchome.com/185","title":"4. \u6743\u9650\u63a7\u5236 acl"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/#4","text":"ACL\uff08Access Control List \u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff09 Kafka acl \u89c4\u5219\u5b9a\u4e49\u6a21\u5f0f\u4e3a\uff1a Principal `P` is `[Allowed/Denied]` Operation `O` From Host `H` on any Resource `R` matching ResourcePattern `RP`","title":"4 \u6743\u9650\u63a7\u5236"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/#_1","text":"https://kafka.apache.org/documentation/#security_authz https://www.orchome.com/185","title":"\u53c2\u8003"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/1-%E5%BC%80%E5%90%AF%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/","text":"4.1 \u5f00\u542f\u6743\u9650\u63a7\u5236 \u5f00\u542f\u6743\u9650\u63a7\u5236 Kafka \u63d0\u4f9b\u4e86\u6743\u9650\u63a7\u5236\u7684\u63a5\u53e3( kafka.security.authorizer.Authorizer )\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u5b9e\u73b0\uff0c\u7528 zookeeper \u5b58\u50a8 acl \u89c4\u5219(\u9ed8\u8ba4\u5b58\u50a8\u8def\u5f84 /kafka-acl )\u3002 \u901a\u8fc7 authorizer.class.name \u6307\u5b9a Authorizer \u540e\uff0ckafka broker \u542f\u52a8\u65f6\u4f1a\u521d\u59cb\u5316\u8be5\u7c7b\uff0c\u5e76\u5728\u5904\u7406 api \u8bf7\u6c42\u65f6\u901a\u8fc7\u8be5\u7c7b\u5224\u65ad\u6743\u9650\uff1a # 2.4 \u7248\u672c\u4e4b\u524d # authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer # 2.4 \u7248\u672c\u4e4b\u540e\u5efa\u8bae\u4f7f\u7528\u8fd9\u4e2a authorizer.class.name = kafka.security.authorizer.AclAuthorizer \u4e3a\u4e86\u65b9\u4fbf\u81ea\u5b9a\u4e49 Authorizer\uff0c2.4 \u4e4b\u540e\u63a5\u53e3\u7531\u539f\u6765\u7684 scala \u5b9a\u4e49\u7684 kafka.security.authorizer.Authorizer \u53d8\u4e3a java \u5b9a\u4e49\u7684 org.apache.kafka.server.authorizer.Authorizer Authorizer \u9ed8\u8ba4\u548c kafka \u4f7f\u7528\u540c\u4e00\u4e2a zookeeper \u670d\u52a1\uff0c\u4e5f\u53ef\u4ee5\u5355\u72ec\u914d\u7f6e\uff1a authorizer.zookeeper.url = authorizer.zookeeper.connection.timeout.ms = authorizer.zookeeper.session.timeout.ms = authorizer.zookeeper.max.in.flight.requests = \u5176\u4ed6\u76f8\u5173\u914d\u7f6e \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8d44\u6e90 R \u6ca1\u6709\u5173\u8054\u7684 acl \u89c4\u5219\uff0c\u90a3\u4e48\u9664\u4e86 super users \u5916\u7684\u4efb\u4f55\u7528\u6237\u90fd\u4e0d\u80fd\u8bbf\u95ee R\u3002 \u5982\u679c\u60f3\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a\uff0c\u53ef\u4ee5\u8bbe\u7f6e\uff1a allow.everyone.if.no.acl.found = true super users \u53ef\u4ee5\u901a\u8fc7 super.users \u5b9a\u4e49\uff1a super.users = User:Bob;User:Alice \u8bbe\u7f6e allow.everyone.if.no.acl.found=true \u5728\u751f\u4ea7\u73af\u5883\u662f\u4e0d\u63a8\u8350\u7684\uff0c\u4f1a\u5e26\u6765 2 \u4e2a\u95ee\u9898\uff1a \u5bf9\u4e8e\u6ca1\u6709\u5173\u8054 acl \u89c4\u5219\u7684\u8d44\u6e90\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6240\u6709\u7528\u6237\u5f00\u653e \u5c06\u4e00\u4e2a\u8d44\u6e90\u5173\u8054 acl \u89c4\u5219\u540e\uff0c\u4e4b\u524d\u8bbf\u95ee\u8fd9\u4e2a\u8d44\u6e90\u7684\u7528\u6237\u5c06\u5931\u53bb\u8bbf\u95ee\u6743\u9650","title":"4.1 \u5f00\u542f\u6743\u9650\u63a7\u5236"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/1-%E5%BC%80%E5%90%AF%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/#41","text":"","title":"4.1 \u5f00\u542f\u6743\u9650\u63a7\u5236"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/1-%E5%BC%80%E5%90%AF%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/#_1","text":"Kafka \u63d0\u4f9b\u4e86\u6743\u9650\u63a7\u5236\u7684\u63a5\u53e3( kafka.security.authorizer.Authorizer )\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u5b9e\u73b0\uff0c\u7528 zookeeper \u5b58\u50a8 acl \u89c4\u5219(\u9ed8\u8ba4\u5b58\u50a8\u8def\u5f84 /kafka-acl )\u3002 \u901a\u8fc7 authorizer.class.name \u6307\u5b9a Authorizer \u540e\uff0ckafka broker \u542f\u52a8\u65f6\u4f1a\u521d\u59cb\u5316\u8be5\u7c7b\uff0c\u5e76\u5728\u5904\u7406 api \u8bf7\u6c42\u65f6\u901a\u8fc7\u8be5\u7c7b\u5224\u65ad\u6743\u9650\uff1a # 2.4 \u7248\u672c\u4e4b\u524d # authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer # 2.4 \u7248\u672c\u4e4b\u540e\u5efa\u8bae\u4f7f\u7528\u8fd9\u4e2a authorizer.class.name = kafka.security.authorizer.AclAuthorizer \u4e3a\u4e86\u65b9\u4fbf\u81ea\u5b9a\u4e49 Authorizer\uff0c2.4 \u4e4b\u540e\u63a5\u53e3\u7531\u539f\u6765\u7684 scala \u5b9a\u4e49\u7684 kafka.security.authorizer.Authorizer \u53d8\u4e3a java \u5b9a\u4e49\u7684 org.apache.kafka.server.authorizer.Authorizer Authorizer \u9ed8\u8ba4\u548c kafka \u4f7f\u7528\u540c\u4e00\u4e2a zookeeper \u670d\u52a1\uff0c\u4e5f\u53ef\u4ee5\u5355\u72ec\u914d\u7f6e\uff1a authorizer.zookeeper.url = authorizer.zookeeper.connection.timeout.ms = authorizer.zookeeper.session.timeout.ms = authorizer.zookeeper.max.in.flight.requests =","title":"\u5f00\u542f\u6743\u9650\u63a7\u5236"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/1-%E5%BC%80%E5%90%AF%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/#_2","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8d44\u6e90 R \u6ca1\u6709\u5173\u8054\u7684 acl \u89c4\u5219\uff0c\u90a3\u4e48\u9664\u4e86 super users \u5916\u7684\u4efb\u4f55\u7528\u6237\u90fd\u4e0d\u80fd\u8bbf\u95ee R\u3002 \u5982\u679c\u60f3\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a\uff0c\u53ef\u4ee5\u8bbe\u7f6e\uff1a allow.everyone.if.no.acl.found = true super users \u53ef\u4ee5\u901a\u8fc7 super.users \u5b9a\u4e49\uff1a super.users = User:Bob;User:Alice \u8bbe\u7f6e allow.everyone.if.no.acl.found=true \u5728\u751f\u4ea7\u73af\u5883\u662f\u4e0d\u63a8\u8350\u7684\uff0c\u4f1a\u5e26\u6765 2 \u4e2a\u95ee\u9898\uff1a \u5bf9\u4e8e\u6ca1\u6709\u5173\u8054 acl \u89c4\u5219\u7684\u8d44\u6e90\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6240\u6709\u7528\u6237\u5f00\u653e \u5c06\u4e00\u4e2a\u8d44\u6e90\u5173\u8054 acl \u89c4\u5219\u540e\uff0c\u4e4b\u524d\u8bbf\u95ee\u8fd9\u4e2a\u8d44\u6e90\u7684\u7528\u6237\u5c06\u5931\u53bb\u8bbf\u95ee\u6743\u9650","title":"\u5176\u4ed6\u76f8\u5173\u914d\u7f6e"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/2-%E7%A1%AE%E5%AE%9A%20Principal/","text":"4.2 \u786e\u5b9a Principal Principal (User) \u600e\u4e48\u786e\u5b9a SSL \u5bf9\u4e8e SSL\uff0cuser name \u6765\u81ea client \u8bc1\u4e66\u7684 CN=writeuser,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown \u4fe1\u606f(the X.500 certificate distinguished name)\u3002 \u53ef\u4ee5\u901a\u8fc7 ssl.principal.mapping.rules \u4ece\u8bc1\u4e66\u7684 distinguished name \u4e2d\u63d0\u53d6 short name RULE:pattern/replacement/ RULE:pattern/replacement/[LU] \u5982\u679c\u6709\u4ee5\u4e0b\u89c4\u5219\uff1a RULE:^CN=(.*?),OU=ServiceUsers.*$/$1/, RULE:^CN=(.*?),OU=(.*?),O=(.*?),L=(.*?),ST=(.*?),C=(.*?)$/$1@$2/L, RULE:^.*[Cc][Nn]=([a-zA-Z0-9.]*).*$/$1/L, DEFAULT \u90a3\u4e48\u4ece \"CN=serviceuser,OU=ServiceUsers,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\" \u4f1a\u63d0\u53d6\u51fa serviceuser \u4f5c\u4e3a\u7528\u6237\u540d(Principal) \u4ece \"CN=adminUser,OU=Admin,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\" \u4f1a\u63d0\u53d6\u51fa adminuser@admin \u4f5c\u4e3a\u7528\u6237\u540d(Principal) SASL Principal \u5373\u4e3a\u6ce8\u518c\u7684\u7528\u6237\u540d","title":"4.2 \u786e\u5b9a Principal"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/2-%E7%A1%AE%E5%AE%9A%20Principal/#42-principal","text":"","title":"4.2 \u786e\u5b9a Principal"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/2-%E7%A1%AE%E5%AE%9A%20Principal/#principal-user","text":"","title":"Principal (User) \u600e\u4e48\u786e\u5b9a"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/2-%E7%A1%AE%E5%AE%9A%20Principal/#ssl","text":"\u5bf9\u4e8e SSL\uff0cuser name \u6765\u81ea client \u8bc1\u4e66\u7684 CN=writeuser,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown \u4fe1\u606f(the X.500 certificate distinguished name)\u3002 \u53ef\u4ee5\u901a\u8fc7 ssl.principal.mapping.rules \u4ece\u8bc1\u4e66\u7684 distinguished name \u4e2d\u63d0\u53d6 short name RULE:pattern/replacement/ RULE:pattern/replacement/[LU] \u5982\u679c\u6709\u4ee5\u4e0b\u89c4\u5219\uff1a RULE:^CN=(.*?),OU=ServiceUsers.*$/$1/, RULE:^CN=(.*?),OU=(.*?),O=(.*?),L=(.*?),ST=(.*?),C=(.*?)$/$1@$2/L, RULE:^.*[Cc][Nn]=([a-zA-Z0-9.]*).*$/$1/L, DEFAULT \u90a3\u4e48\u4ece \"CN=serviceuser,OU=ServiceUsers,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\" \u4f1a\u63d0\u53d6\u51fa serviceuser \u4f5c\u4e3a\u7528\u6237\u540d(Principal) \u4ece \"CN=adminUser,OU=Admin,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\" \u4f1a\u63d0\u53d6\u51fa adminuser@admin \u4f5c\u4e3a\u7528\u6237\u540d(Principal)","title":"SSL"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/2-%E7%A1%AE%E5%AE%9A%20Principal/#sasl","text":"Principal \u5373\u4e3a\u6ce8\u518c\u7684\u7528\u6237\u540d","title":"SASL"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/3-%E5%AE%9A%E4%BD%8D%20acl/","text":"4.3 \u5b9a\u4f4d acl \u89c4\u5219 acl \u89c4\u5219\u7ec4\u6210 AclBinding ResourcePattern ResourceType : enum \u7c7b\u578b\uff0c\u53ef\u9009\u503c\u6709: UNKNOWN : \u4ee3\u8868\u4efb\u4f55\u4e0d\u7406\u89e3\u7684\u7c7b\u578b ANY : \u5728 filter \u4e2d\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u7c7b\u578b TOPIC GROUP CLUSTER TRANSACTIONAL_ID DELEGATION_TOKEN Resource Name : topic \u540d\uff0cgroup id\uff0ctransaction id \u7b49\u3002\u7279\u522b\u8bf4\u660e: \u8d44\u6e90\u7c7b\u578b\u4e3a CLUSTER \uff0cResource Name \u56fa\u5b9a\u4e3a kafka-cluster \u3002 PatternType : enum \u7c7b\u578b\uff0c\u53ef\u9009\u503c\u6709\uff1a UNKNOWN : \u4ee3\u8868\u4efb\u4f55\u4e0d\u7406\u89e3\u7684\u7c7b\u578b ANY : \u5728 filter \u4e2d\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u7c7b\u578b MATCH : \u5728 filter \u4e2d\uff0c\u4efb\u4f55\u80fd\u5339\u914d\u5230\u5176\u7684\u8d44\u6e90\uff0c\u6bd4\u5982 ResourcePatternFilter(TOPIC, \"payments.received\", MATCH) \uff0c\u4ee5\u4e0b 3 \u4e2a\u90fd\u80fd\u5339\u914d\uff1a ResourcePattern(TOPIC, \"payments.received\", LITERAL) , ResourcePattern(TOPIC, \"*\", LITERAL) , ResourcePattern(TOPIC, \"payments.\", PREFIXED) LITERAL : \u5168\u5339\u914d\uff0c\u6b64\u7c7b\u578b\u4e0b\u5982\u679c resource name \u662f * \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u540d\u79f0\u7684\u8d44\u6e90 PREFIXED : \u524d\u7f00\u5339\u914d AccessControlEntry principal: \u6a21\u5f0f\u4e3a {principalType}:{principalName} \u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982: KafkaPrincipal.USER_TYPE + \":alice\" host AclOperation : UNKNOWN ANY ALL READ WRITE CREATE DELETE ALTER DESCRIBE CLUSTER_ACTION DESCRIBE_CONFIGS ALTER_CONFIGS IDEMPOTENT_WRITE AclPermissionType UNKNOWN ANY DENY ALLOW","title":"4.3 \u5b9a\u4f4d acl"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/3-%E5%AE%9A%E4%BD%8D%20acl/#43-acl","text":"","title":"4.3 \u5b9a\u4f4d acl \u89c4\u5219"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/3-%E5%AE%9A%E4%BD%8D%20acl/#acl","text":"AclBinding ResourcePattern ResourceType : enum \u7c7b\u578b\uff0c\u53ef\u9009\u503c\u6709: UNKNOWN : \u4ee3\u8868\u4efb\u4f55\u4e0d\u7406\u89e3\u7684\u7c7b\u578b ANY : \u5728 filter \u4e2d\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u7c7b\u578b TOPIC GROUP CLUSTER TRANSACTIONAL_ID DELEGATION_TOKEN Resource Name : topic \u540d\uff0cgroup id\uff0ctransaction id \u7b49\u3002\u7279\u522b\u8bf4\u660e: \u8d44\u6e90\u7c7b\u578b\u4e3a CLUSTER \uff0cResource Name \u56fa\u5b9a\u4e3a kafka-cluster \u3002 PatternType : enum \u7c7b\u578b\uff0c\u53ef\u9009\u503c\u6709\uff1a UNKNOWN : \u4ee3\u8868\u4efb\u4f55\u4e0d\u7406\u89e3\u7684\u7c7b\u578b ANY : \u5728 filter \u4e2d\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u7c7b\u578b MATCH : \u5728 filter \u4e2d\uff0c\u4efb\u4f55\u80fd\u5339\u914d\u5230\u5176\u7684\u8d44\u6e90\uff0c\u6bd4\u5982 ResourcePatternFilter(TOPIC, \"payments.received\", MATCH) \uff0c\u4ee5\u4e0b 3 \u4e2a\u90fd\u80fd\u5339\u914d\uff1a ResourcePattern(TOPIC, \"payments.received\", LITERAL) , ResourcePattern(TOPIC, \"*\", LITERAL) , ResourcePattern(TOPIC, \"payments.\", PREFIXED) LITERAL : \u5168\u5339\u914d\uff0c\u6b64\u7c7b\u578b\u4e0b\u5982\u679c resource name \u662f * \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u540d\u79f0\u7684\u8d44\u6e90 PREFIXED : \u524d\u7f00\u5339\u914d AccessControlEntry principal: \u6a21\u5f0f\u4e3a {principalType}:{principalName} \u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982: KafkaPrincipal.USER_TYPE + \":alice\" host AclOperation : UNKNOWN ANY ALL READ WRITE CREATE DELETE ALTER DESCRIBE CLUSTER_ACTION DESCRIBE_CONFIGS ALTER_CONFIGS IDEMPOTENT_WRITE AclPermissionType UNKNOWN ANY DENY ALLOW","title":"acl \u89c4\u5219\u7ec4\u6210"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/4-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/","text":"4.4 \u547d\u4ee4\u884c\u5de5\u5177 \u547d\u4ee4\u884c\u5de5\u5177 kafka-acls.sh Action: --add : \u589e\u52a0 acl \u89c4\u5219 --remove : \u5220\u9664 acl \u89c4\u5219 --list Configuration: --authorizer : authorizer \u7684\u7c7b\u540d\uff0c\u9ed8\u8ba4 kafka.security.authorizer.AclAuthorizer --authorizer-properties : key-val pairs \u7528\u6765\u521d\u59cb authorizer\u3002\u5bf9\u4e8e\u9ed8\u8ba4\u7684 authorizer\uff0c\u9700\u8981\u4f20 zookeeper.connect= --bootstrap-server : kafka \u670d\u52a1\u5730\u5740\uff0c\u4e0e authorizer \u76f8\u5173\u7684\u914d\u7f6e\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u4e2a --command-config : \u53ef\u4e0e --bootstrap-server \u4e00\u8d77\u4f7f\u7528\uff0c\u6307\u5b9a\u4e00\u4e2a\u5305\u542b\u914d\u7f6e\u7684 property \u6587\u4ef6\uff0c\u7528\u6765\u521d\u59cb Admin Client --resource-pattern-type [pattern-type] add acls: LITERAL : \u5b8c\u5168\u5339\u914d\uff0c\u4f46\u662f\u53ef\u4ee5\u7528 * \u4ee3\u8868\u6240\u6709 PREFIXED : \u524d\u7f00\u5339\u914d list or remove acls: ANY : MATCH : \u8868\u793a\u6240\u6709\u4f1a\u5f71\u54cd\u5230 resource \u7684\u89c4\u5219\uff0c\u5305\u62ec\u524d\u7f00\u5339\u914d\u6216\u8005 * --zk-tls-config-file ResourcePattern --cluster --topic [topic-name] --group [group-name] --transactional-id [transactional-id] --delegation-token [delegation-token] Principal --allow-principal --deny-principal --principal Host --allow-host --deny-host Operation --operation : \u53ef\u9009\u7684\u503c\uff1a Read Write Create Alter Describe ClusterAction DescribeConfigs AlterConfigs IdempotentWrite All Convenience --producer : Write, Describe, Create on topic --consumer : Read, Describe on topic and Read on consumer-group --idempotent : \u548c --producer \u4e00\u8d77\u4f7f\u7528\uff0c\u8868\u793a producer \u53ef\u4ee5\u5e42\u7b49\u5199 \u793a\u4f8b\uff1a \u5141\u8bb8 User:Bob \u6216\u8005 User:Alice \u4ece IP 198.51.100.0 \u6216\u8005 198.51.100.1 \u8bfb\u5199 Test-topic bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Bob --allow-principal User:Alice \\ --allow-host 198.51.100.0 --allow-host 198.51.100.1 \\ --operation Read --operation Write \\ --topic Test-topic \u5141\u8bb8\u9664 \u4ece IP 198.51.100.3 \u8bbf\u95ee\u7684 User:BadBob \u5916\u7684\u6240\u6709\u7528\u6237\u8bfb Test-topic bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:* --allow-host * \\ --deny-principal User:BadBob --deny-host 198.51.100.3 \\ --operation Read \\ --topic Test-topic \u4ece IP 198.51.200.0 \u8bbf\u95ee\u7684 User:Peter \u5141\u8bb8\u5411\u4efb\u4f55 topic \u751f\u4ea7\u6d88\u606f bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Peter \\ --allow-host 198.51.200.1 \\ --producer \\ --topic * bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Peter \\ --allow-host 198.51.200.1 \\ --producer \\ --topic=* \u5141\u8bb8 User:Jane \u5411\u4efb\u4f55\u4ee5 Test- \u5f00\u5934\u7684 topic \u751f\u4ea7\u6d88\u606f bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Jane \\ --producer \\ --topic Test- \\ --resource-pattern-type prefixed \u79fb\u9664\u6dfb\u52a0\u7684\u7b2c 1 \u6761 acl \u89c4\u5219 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --remove \\ --allow-principal User:Bob --allow-principal User:Alice \\ --allow-host 198.51.100.0 --allow-host 198.51.100.1 \\ --operation Read --operation Write \\ --topic Test-topic \u79fb\u9664\u6dfb\u52a0\u7684\u7b2c 4 \u6761 acl \u89c4\u5219\uff08topic \u524d\u7f00\u5339\u914d\uff09 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --remove \\ --allow-principal User:Jane \\ --producer \\ --topic Test- \\ --resource-pattern-type Prefixed \u53ef\u4ee5\u6839\u636e resource \u5217\u51fa\u5173\u8054\u7684 acl \u89c4\u5219\u5217\u8868\uff0c\u6bd4\u5982\u5217\u51fa topic Test-topic \u76f8\u5173\u8054\u7684 acl \u89c4\u5219 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --list \\ --topic Test-topic \u53ef\u4ee5\u7528 * \u8868\u793a\u6240\u6709 resource\uff0c\u6bd4\u5982\u5217\u51fa\u6240\u6709 topic \u7684 acl \u89c4\u5219 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --list \\ --topic * \u5982\u679c\u60f3\u770b\u7279\u5b9a resource \u5173\u8054\u7684\u6240\u6709\u8bb0\u5f55\uff0c\u5305\u62ec\u524d\u7f00\u5339\u914d\u548c * \uff0c\u53ef\u4ee5\u4f7f\u7528 match bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --list \\ --topic Test-topic \\ --resource-pattern-type match --producer \u9009\u9879\u53ef\u4ee5\u65b9\u4fbf\u7684\u4ee3\u8868\u751f\u4ea7\u6d88\u606f\u9700\u8981\u7684\u64cd\u4f5c bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Bob \\ --producer \\ --topic * --consumer \u9009\u9879\u53ef\u4ee5\u65b9\u4fbf\u7684\u4ee3\u8868\u6d88\u8d39\u6d88\u606f\u9700\u8981\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u8981\u4e0e --group \u642d\u914d\u4f7f\u7528 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Bob \\ --consumer \\ --topic * \\ --group * \u7ed9\u7528\u6237 Bob \u589e\u52a0 \u5e42\u7b49\u5199 \u6743\u9650 kafka-acls.sh \\ --authorizer-properties zookeeper.connect=loalhost:2181 \\ --add \\ --allow-principal User:Bob \\ --operation IdempotentWrite --cluster Adding ACLs for resource `ResourcePattern(resourceType=CLUSTER, name=kafka-cluster, patternType=LITERAL)`: (principal=User:Bob, host=*, operation=IDEMPOTENT_WRITE, permissionType=ALLOW) Current ACLs for resource `ResourcePattern(resourceType=CLUSTER, name=kafka-cluster, patternType=LITERAL)`: (principal=User:Bob, host=*, operation=IDEMPOTENT_WRITE, permissionType=ALLOW)","title":"4.4 \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/4-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/#44","text":"","title":"4.4 \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/4-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/#_1","text":"kafka-acls.sh Action: --add : \u589e\u52a0 acl \u89c4\u5219 --remove : \u5220\u9664 acl \u89c4\u5219 --list Configuration: --authorizer : authorizer \u7684\u7c7b\u540d\uff0c\u9ed8\u8ba4 kafka.security.authorizer.AclAuthorizer --authorizer-properties : key-val pairs \u7528\u6765\u521d\u59cb authorizer\u3002\u5bf9\u4e8e\u9ed8\u8ba4\u7684 authorizer\uff0c\u9700\u8981\u4f20 zookeeper.connect= --bootstrap-server : kafka \u670d\u52a1\u5730\u5740\uff0c\u4e0e authorizer \u76f8\u5173\u7684\u914d\u7f6e\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u4e2a --command-config : \u53ef\u4e0e --bootstrap-server \u4e00\u8d77\u4f7f\u7528\uff0c\u6307\u5b9a\u4e00\u4e2a\u5305\u542b\u914d\u7f6e\u7684 property \u6587\u4ef6\uff0c\u7528\u6765\u521d\u59cb Admin Client --resource-pattern-type [pattern-type] add acls: LITERAL : \u5b8c\u5168\u5339\u914d\uff0c\u4f46\u662f\u53ef\u4ee5\u7528 * \u4ee3\u8868\u6240\u6709 PREFIXED : \u524d\u7f00\u5339\u914d list or remove acls: ANY : MATCH : \u8868\u793a\u6240\u6709\u4f1a\u5f71\u54cd\u5230 resource \u7684\u89c4\u5219\uff0c\u5305\u62ec\u524d\u7f00\u5339\u914d\u6216\u8005 * --zk-tls-config-file ResourcePattern --cluster --topic [topic-name] --group [group-name] --transactional-id [transactional-id] --delegation-token [delegation-token] Principal --allow-principal --deny-principal --principal Host --allow-host --deny-host Operation --operation : \u53ef\u9009\u7684\u503c\uff1a Read Write Create Alter Describe ClusterAction DescribeConfigs AlterConfigs IdempotentWrite All Convenience --producer : Write, Describe, Create on topic --consumer : Read, Describe on topic and Read on consumer-group --idempotent : \u548c --producer \u4e00\u8d77\u4f7f\u7528\uff0c\u8868\u793a producer \u53ef\u4ee5\u5e42\u7b49\u5199 \u793a\u4f8b\uff1a \u5141\u8bb8 User:Bob \u6216\u8005 User:Alice \u4ece IP 198.51.100.0 \u6216\u8005 198.51.100.1 \u8bfb\u5199 Test-topic bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Bob --allow-principal User:Alice \\ --allow-host 198.51.100.0 --allow-host 198.51.100.1 \\ --operation Read --operation Write \\ --topic Test-topic \u5141\u8bb8\u9664 \u4ece IP 198.51.100.3 \u8bbf\u95ee\u7684 User:BadBob \u5916\u7684\u6240\u6709\u7528\u6237\u8bfb Test-topic bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:* --allow-host * \\ --deny-principal User:BadBob --deny-host 198.51.100.3 \\ --operation Read \\ --topic Test-topic \u4ece IP 198.51.200.0 \u8bbf\u95ee\u7684 User:Peter \u5141\u8bb8\u5411\u4efb\u4f55 topic \u751f\u4ea7\u6d88\u606f bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Peter \\ --allow-host 198.51.200.1 \\ --producer \\ --topic * bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Peter \\ --allow-host 198.51.200.1 \\ --producer \\ --topic=* \u5141\u8bb8 User:Jane \u5411\u4efb\u4f55\u4ee5 Test- \u5f00\u5934\u7684 topic \u751f\u4ea7\u6d88\u606f bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Jane \\ --producer \\ --topic Test- \\ --resource-pattern-type prefixed \u79fb\u9664\u6dfb\u52a0\u7684\u7b2c 1 \u6761 acl \u89c4\u5219 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --remove \\ --allow-principal User:Bob --allow-principal User:Alice \\ --allow-host 198.51.100.0 --allow-host 198.51.100.1 \\ --operation Read --operation Write \\ --topic Test-topic \u79fb\u9664\u6dfb\u52a0\u7684\u7b2c 4 \u6761 acl \u89c4\u5219\uff08topic \u524d\u7f00\u5339\u914d\uff09 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --remove \\ --allow-principal User:Jane \\ --producer \\ --topic Test- \\ --resource-pattern-type Prefixed \u53ef\u4ee5\u6839\u636e resource \u5217\u51fa\u5173\u8054\u7684 acl \u89c4\u5219\u5217\u8868\uff0c\u6bd4\u5982\u5217\u51fa topic Test-topic \u76f8\u5173\u8054\u7684 acl \u89c4\u5219 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --list \\ --topic Test-topic \u53ef\u4ee5\u7528 * \u8868\u793a\u6240\u6709 resource\uff0c\u6bd4\u5982\u5217\u51fa\u6240\u6709 topic \u7684 acl \u89c4\u5219 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --list \\ --topic * \u5982\u679c\u60f3\u770b\u7279\u5b9a resource \u5173\u8054\u7684\u6240\u6709\u8bb0\u5f55\uff0c\u5305\u62ec\u524d\u7f00\u5339\u914d\u548c * \uff0c\u53ef\u4ee5\u4f7f\u7528 match bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --list \\ --topic Test-topic \\ --resource-pattern-type match --producer \u9009\u9879\u53ef\u4ee5\u65b9\u4fbf\u7684\u4ee3\u8868\u751f\u4ea7\u6d88\u606f\u9700\u8981\u7684\u64cd\u4f5c bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Bob \\ --producer \\ --topic * --consumer \u9009\u9879\u53ef\u4ee5\u65b9\u4fbf\u7684\u4ee3\u8868\u6d88\u8d39\u6d88\u606f\u9700\u8981\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u8981\u4e0e --group \u642d\u914d\u4f7f\u7528 bin/kafka-acls.sh \\ --authorizer-properties zookeeper.connect=localhost:2181 \\ --add \\ --allow-principal User:Bob \\ --consumer \\ --topic * \\ --group * \u7ed9\u7528\u6237 Bob \u589e\u52a0 \u5e42\u7b49\u5199 \u6743\u9650 kafka-acls.sh \\ --authorizer-properties zookeeper.connect=loalhost:2181 \\ --add \\ --allow-principal User:Bob \\ --operation IdempotentWrite --cluster Adding ACLs for resource `ResourcePattern(resourceType=CLUSTER, name=kafka-cluster, patternType=LITERAL)`: (principal=User:Bob, host=*, operation=IDEMPOTENT_WRITE, permissionType=ALLOW) Current ACLs for resource `ResourcePattern(resourceType=CLUSTER, name=kafka-cluster, patternType=LITERAL)`: (principal=User:Bob, host=*, operation=IDEMPOTENT_WRITE, permissionType=ALLOW)","title":"\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/5-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E6%89%80%E9%9C%80%E6%9D%83%E9%99%90/","text":"4.5 \u5e38\u89c1\u573a\u666f\u6240\u9700\u6743\u9650 Producer Acls AclOperation ResourceType WRITE Topic WRITE TransactionalId DESCRIBE TransactionalId handleFindCoordinatorRequest IDEMPOTENT_WRITE Cluster CREATE Topic CREATE Cluster DESCRIBE Topic ALTER Topic Consumer Acls READ Topic READ Group CLUSTER_ACTION Cluster: follower \u7684\u7528\u6237\u5fc5\u987b\u5bf9 CLUSTER \u6709 ClusterAction \u6743\u9650\uff0c\u624d\u80fd\u4ece leader \u62c9\u53d6 partition \u6570\u636e DESCRIBE Topic, DESCRIBE Group: consumer \u7684\u7528\u6237\u5fc5\u987b\u5bf9 topic \u548c group \u90fd\u6709 DESCRIBE \u6743\u9650\uff0c\u624d\u80fd\u83b7\u53d6\u5230 topic \u7684 offset \u4ee5\u53ca consumer \u7684\u5206\u914d\u4fe1\u606f\u4ee5\u53ca offset DESCRIBE Cluster: list groups \u64cd\u4f5c\u9700\u8981 CLUSTER \u7684 DESCRIBE \u6743\u9650 \u53c2\u8003 https://medium.com/@nzaporozhets/getting-started-with-kafka-acls-14b16bbf83d1","title":"4.5 \u5e38\u89c1\u573a\u666f\u6240\u9700\u6743\u9650"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/5-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E6%89%80%E9%9C%80%E6%9D%83%E9%99%90/#45","text":"","title":"4.5 \u5e38\u89c1\u573a\u666f\u6240\u9700\u6743\u9650"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/5-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E6%89%80%E9%9C%80%E6%9D%83%E9%99%90/#producer-acls","text":"AclOperation ResourceType WRITE Topic WRITE TransactionalId DESCRIBE TransactionalId handleFindCoordinatorRequest IDEMPOTENT_WRITE Cluster CREATE Topic CREATE Cluster DESCRIBE Topic ALTER Topic","title":"Producer Acls"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/5-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E6%89%80%E9%9C%80%E6%9D%83%E9%99%90/#consumer-acls","text":"READ Topic READ Group CLUSTER_ACTION Cluster: follower \u7684\u7528\u6237\u5fc5\u987b\u5bf9 CLUSTER \u6709 ClusterAction \u6743\u9650\uff0c\u624d\u80fd\u4ece leader \u62c9\u53d6 partition \u6570\u636e DESCRIBE Topic, DESCRIBE Group: consumer \u7684\u7528\u6237\u5fc5\u987b\u5bf9 topic \u548c group \u90fd\u6709 DESCRIBE \u6743\u9650\uff0c\u624d\u80fd\u83b7\u53d6\u5230 topic \u7684 offset \u4ee5\u53ca consumer \u7684\u5206\u914d\u4fe1\u606f\u4ee5\u53ca offset DESCRIBE Cluster: list groups \u64cd\u4f5c\u9700\u8981 CLUSTER \u7684 DESCRIBE \u6743\u9650","title":"Consumer Acls"},{"location":"4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%20acl/5-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E6%89%80%E9%9C%80%E6%9D%83%E9%99%90/#_1","text":"https://medium.com/@nzaporozhets/getting-started-with-kafka-acls-14b16bbf83d1","title":"\u53c2\u8003"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/","text":"5 \u5176\u4ed6\u76f8\u5173\u914d\u7f6e","title":"5. \u5176\u4ed6\u76f8\u5173\u914d\u7f6e"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/#5","text":"","title":"5 \u5176\u4ed6\u76f8\u5173\u914d\u7f6e"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/1-%E7%9B%91%E5%90%AC%E5%9C%B0%E5%9D%80/","text":"5.1 \u76d1\u542c\u5730\u5740 \u76d1\u542c\u5730\u5740\u4ee5\u53ca\u5982\u4f55\u5f00\u542f\u591a\u79cd\u534f\u8bae\u8bbf\u95ee listeners : \u914d\u7f6e\u5f00\u542f\u76d1\u542c\u7684\u65b9\u5f0f\u4e0e\u5730\u5740\uff0c\u683c\u5f0f\u4e3a listeners=<listener_name>://[ip_or_hostname]:<port>,{<listener_name>://[ip_or_hostname]:<port>} listener_name \u53ef\u4ee5\u51b3\u5b9a security protocol ip_or_hostname \u5fc5\u987b\u662f\u672c\u5730\u53ef\u4ee5\u76d1\u542c\u7684\u5730\u5740\uff08\u672c\u5730IP\uff0clocalhost\uff0c0.0.0.0 \u7b49\uff09\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\u3002 port \u5fc5\u987b\u662f\u672c\u5730\u53ef\u4ee5\u76d1\u542c\u7684\u7aef\u53e3 advertised.listeners : listeners \u76d1\u542c\u7684\u5730\u5740\u5fc5\u987b\u662f\u672c\u5730\u5730\u5740\uff0c\u5982\u679c\u60f3\u901a\u8fc7\u5916\u7f51 ip \u8bbf\u95ee broker\uff0c\u5219\u9700\u8981\u901a\u8fc7 advertised.listeners \u5c06\u5916\u7f51 IP \u6ce8\u518c\u5230 zookeeper \u4e2d listener.security.protocol.map : map a listener name to a security protocol \uff0cmap \u7684 key (\u5373 listener name) \u53ea\u5e94\u8be5\u51fa\u73b0\u4e00\u6b21\uff0c\u4f46\u662f values (\u5373 security protocol) \u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8fd9\u9879\u914d\u7f6e\uff0clistener name \u9ed8\u8ba4\u4e0e security protocol \u76f8\u540c\u3002\u8fd9\u9879\u914d\u7f6e\u53ef\u4ee5\u7ed9\u4e0d\u540c listener \u5176\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u540d\u5b57\uff0c\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u7528\u4e0d\u540c\u7684 listener name \u6620\u5c04\u76f8\u540c\u7684 security protocol\uff0c\u8fbe\u5230\u5f00\u542f\u591a\u4e2a\u76f8\u540c security protocol \u7aef\u53e3\u7684\u76d1\u542c\u7684\u4f5c\u7528\u3002 \u4e0b\u9762\u7ed9\u4e00\u4e2a\u793a\u4f8b\uff1a listeners = BROKER_DATA://:9090,BROKER_CONTROL://:9091,VPC_CLIENT://:9092,SASL_CLIENT://:9093,SSL_CLIENT://:9094,EXT_CLIENT://:9095 advertised.listeners = BROKER_DATA://192.168.64.7:9090,BROKER_CONTROL://192.168.64.7:9091,VPC_CLIENT://192.168.64.7:9092,SASL_CLIENT://192.168.64.7:9093,SSL_CLIENT://180.76.145.54:9094,EXT_CLIENT://180.76.145.54:9095 listener.security.protocol.map = BROKER_DATA:PLAINTEXT,BROKER_CONTROL:PLAINTEXT,VPC_CLIENT:PLAINTEXT,SASL_CLIENT:SASL_PLAINTEXT,SSL_CLIENT:SSL,EXT_CLIENT:SASL_SSL \u793a\u4f8b\u4e2d\u914d\u7f6e\u4e86 6 \u4e2a\u76d1\u542c\u5730\u5740\uff1a BROKER_DATA : broker \u5185\u90e8\u6570\u636e\u4ea4\u4e92\uff0c\u4f7f\u7528 PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9090 \u7aef\u53e3\u8bbf\u95ee BROKER_CONTROL : broker \u5185\u90e8 controller \u8bf7\u6c42\u4ea4\u4e92\uff0c\u4f7f\u7528 PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9091 \u7aef\u53e3\u8bbf\u95ee VPC_CLIENT : \u63d0\u4f9b\u5185\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9092 \u7aef\u53e3\u8bbf\u95ee SASL_CLIENT : \u63d0\u4f9b\u5185\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 SASL_PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9093 \u7aef\u53e3\u8bbf\u95ee SSL_CLIENT : \u63d0\u4f9b\u5916\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 SSL security protocol\uff0c\u901a\u8fc7\u5916\u7f51 ip \u4e0e 9094 \u7aef\u53e3\u8bbf\u95ee EXT_CLIENT : \u63d0\u4f9b\u5916\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 SASL_SSL security protocol\uff0c\u901a\u8fc7\u5916\u7f51 ip \u4e0e 9095 \u7aef\u53e3\u8bbf\u95ee broker \u5185\u90e8\u4ea4\u4e92 inter.broker.listener.name = BROKER_DATA control.plane.listener.name = BROKER_CONTROL ## \u5982\u679c\u5185\u90e8\u4ea4\u4e92\u901a\u8fc7 SASL \u76f8\u5173\u534f\u8bae\uff0c\u8fd8\u9700\u8981\u6307\u5b9a\u673a\u5236 ## SASL mechanism used for communication with controllers. #sasl.mechanism.controller.protocol=PLAIN # ## SASL mechanism used for inter-broker communication. #sasl.mechanism.inter.broker.protocol=PLAIN \u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u53c2\u6570 security.inter.broker.protocol \uff0c\u540c\u65f6\u8bbe\u7f6e security.inter.broker.protocol \u548c inter.broker.listener.name \u662f\u9519\u8bef\u7684\uff0c inter.broker.listener.name \u9ed8\u8ba4\u662f null , \u5373 PLAINTEXT \u534f\u8bae\u4f1a\u88ab\u9ed8\u8ba4\u4f7f\u7528 listener name \u7ea7\u522b\u7684\u914d\u7f6e \u53ef\u4ee5\u901a\u8fc7\u5728 listener name \u589e\u52a0\u524d\u7f00(listener name \u9700\u8981\u5c0f\u5199)\u4f5c\u4e3a config name \u4e3a\u4e0d\u540c listener name \u63d0\u4f9b\u4e0d\u540c security (SSL and SASL) \u8bbe\u7f6e\u3002\u4f8b\u5982: ssl: \u5982\u679c\u60f3\u8981\u7ed9 CLIENT listener \u8bbe\u7f6e\u4e0d\u540c\u7684 keystore\uff0c\u53ef\u4ee5\u589e\u52a0\u914d\u7f6e listener.name.client.ssl.keystore.location \uff0c\u5982\u679c\u9488\u5bf9 listener name \u7684\u914d\u7f6e\u6ca1\u6709\u8bbe\u7f6e\uff0c\u4f1a\u9000\u5316\u5230\u901a\u5e38\u7684\u8bbe\u7f6e(\u5373 ssl.keystore.location )\u3002 sasl: \u5bf9\u4e8e SASL\uff0c\u4e00\u4e9b\u914d\u7f6e\u662f\u901a\u8fc7 JAAS \u6587\u4ef6\u63d0\u4f9b\u7684\uff0cJAAS \u6587\u4ef6\u662f\u7531 1 \u4e2a\u6216\u591a\u4e2a entries \u7ec4\u6210\u3002 \u5bf9\u4e8e CLIENT listener\uff0cbroker \u4f1a\u4f18\u5148\u627e\u4ee5 client.KafkaServer \u4e3a entry name \u7684 entry\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0cbroker \u4f1a\u627e entry name \u4e3a KafkaServer \u7684 entry\u3002","title":"5.1 \u76d1\u542c\u5730\u5740"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/1-%E7%9B%91%E5%90%AC%E5%9C%B0%E5%9D%80/#51","text":"","title":"5.1 \u76d1\u542c\u5730\u5740"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/1-%E7%9B%91%E5%90%AC%E5%9C%B0%E5%9D%80/#_1","text":"listeners : \u914d\u7f6e\u5f00\u542f\u76d1\u542c\u7684\u65b9\u5f0f\u4e0e\u5730\u5740\uff0c\u683c\u5f0f\u4e3a listeners=<listener_name>://[ip_or_hostname]:<port>,{<listener_name>://[ip_or_hostname]:<port>} listener_name \u53ef\u4ee5\u51b3\u5b9a security protocol ip_or_hostname \u5fc5\u987b\u662f\u672c\u5730\u53ef\u4ee5\u76d1\u542c\u7684\u5730\u5740\uff08\u672c\u5730IP\uff0clocalhost\uff0c0.0.0.0 \u7b49\uff09\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\u3002 port \u5fc5\u987b\u662f\u672c\u5730\u53ef\u4ee5\u76d1\u542c\u7684\u7aef\u53e3 advertised.listeners : listeners \u76d1\u542c\u7684\u5730\u5740\u5fc5\u987b\u662f\u672c\u5730\u5730\u5740\uff0c\u5982\u679c\u60f3\u901a\u8fc7\u5916\u7f51 ip \u8bbf\u95ee broker\uff0c\u5219\u9700\u8981\u901a\u8fc7 advertised.listeners \u5c06\u5916\u7f51 IP \u6ce8\u518c\u5230 zookeeper \u4e2d listener.security.protocol.map : map a listener name to a security protocol \uff0cmap \u7684 key (\u5373 listener name) \u53ea\u5e94\u8be5\u51fa\u73b0\u4e00\u6b21\uff0c\u4f46\u662f values (\u5373 security protocol) \u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8fd9\u9879\u914d\u7f6e\uff0clistener name \u9ed8\u8ba4\u4e0e security protocol \u76f8\u540c\u3002\u8fd9\u9879\u914d\u7f6e\u53ef\u4ee5\u7ed9\u4e0d\u540c listener \u5176\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u540d\u5b57\uff0c\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u7528\u4e0d\u540c\u7684 listener name \u6620\u5c04\u76f8\u540c\u7684 security protocol\uff0c\u8fbe\u5230\u5f00\u542f\u591a\u4e2a\u76f8\u540c security protocol \u7aef\u53e3\u7684\u76d1\u542c\u7684\u4f5c\u7528\u3002 \u4e0b\u9762\u7ed9\u4e00\u4e2a\u793a\u4f8b\uff1a listeners = BROKER_DATA://:9090,BROKER_CONTROL://:9091,VPC_CLIENT://:9092,SASL_CLIENT://:9093,SSL_CLIENT://:9094,EXT_CLIENT://:9095 advertised.listeners = BROKER_DATA://192.168.64.7:9090,BROKER_CONTROL://192.168.64.7:9091,VPC_CLIENT://192.168.64.7:9092,SASL_CLIENT://192.168.64.7:9093,SSL_CLIENT://180.76.145.54:9094,EXT_CLIENT://180.76.145.54:9095 listener.security.protocol.map = BROKER_DATA:PLAINTEXT,BROKER_CONTROL:PLAINTEXT,VPC_CLIENT:PLAINTEXT,SASL_CLIENT:SASL_PLAINTEXT,SSL_CLIENT:SSL,EXT_CLIENT:SASL_SSL \u793a\u4f8b\u4e2d\u914d\u7f6e\u4e86 6 \u4e2a\u76d1\u542c\u5730\u5740\uff1a BROKER_DATA : broker \u5185\u90e8\u6570\u636e\u4ea4\u4e92\uff0c\u4f7f\u7528 PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9090 \u7aef\u53e3\u8bbf\u95ee BROKER_CONTROL : broker \u5185\u90e8 controller \u8bf7\u6c42\u4ea4\u4e92\uff0c\u4f7f\u7528 PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9091 \u7aef\u53e3\u8bbf\u95ee VPC_CLIENT : \u63d0\u4f9b\u5185\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9092 \u7aef\u53e3\u8bbf\u95ee SASL_CLIENT : \u63d0\u4f9b\u5185\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 SASL_PLAINTEXT security protocol\uff0c\u901a\u8fc7\u5185\u7f51 ip \u4e0e 9093 \u7aef\u53e3\u8bbf\u95ee SSL_CLIENT : \u63d0\u4f9b\u5916\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 SSL security protocol\uff0c\u901a\u8fc7\u5916\u7f51 ip \u4e0e 9094 \u7aef\u53e3\u8bbf\u95ee EXT_CLIENT : \u63d0\u4f9b\u5916\u7f51 client \u8bbf\u95ee\uff0c\u4f7f\u7528 SASL_SSL security protocol\uff0c\u901a\u8fc7\u5916\u7f51 ip \u4e0e 9095 \u7aef\u53e3\u8bbf\u95ee","title":"\u76d1\u542c\u5730\u5740\u4ee5\u53ca\u5982\u4f55\u5f00\u542f\u591a\u79cd\u534f\u8bae\u8bbf\u95ee"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/1-%E7%9B%91%E5%90%AC%E5%9C%B0%E5%9D%80/#broker","text":"inter.broker.listener.name = BROKER_DATA control.plane.listener.name = BROKER_CONTROL ## \u5982\u679c\u5185\u90e8\u4ea4\u4e92\u901a\u8fc7 SASL \u76f8\u5173\u534f\u8bae\uff0c\u8fd8\u9700\u8981\u6307\u5b9a\u673a\u5236 ## SASL mechanism used for communication with controllers. #sasl.mechanism.controller.protocol=PLAIN # ## SASL mechanism used for inter-broker communication. #sasl.mechanism.inter.broker.protocol=PLAIN \u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u53c2\u6570 security.inter.broker.protocol \uff0c\u540c\u65f6\u8bbe\u7f6e security.inter.broker.protocol \u548c inter.broker.listener.name \u662f\u9519\u8bef\u7684\uff0c inter.broker.listener.name \u9ed8\u8ba4\u662f null , \u5373 PLAINTEXT \u534f\u8bae\u4f1a\u88ab\u9ed8\u8ba4\u4f7f\u7528","title":"broker \u5185\u90e8\u4ea4\u4e92"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/1-%E7%9B%91%E5%90%AC%E5%9C%B0%E5%9D%80/#listener-name","text":"\u53ef\u4ee5\u901a\u8fc7\u5728 listener name \u589e\u52a0\u524d\u7f00(listener name \u9700\u8981\u5c0f\u5199)\u4f5c\u4e3a config name \u4e3a\u4e0d\u540c listener name \u63d0\u4f9b\u4e0d\u540c security (SSL and SASL) \u8bbe\u7f6e\u3002\u4f8b\u5982: ssl: \u5982\u679c\u60f3\u8981\u7ed9 CLIENT listener \u8bbe\u7f6e\u4e0d\u540c\u7684 keystore\uff0c\u53ef\u4ee5\u589e\u52a0\u914d\u7f6e listener.name.client.ssl.keystore.location \uff0c\u5982\u679c\u9488\u5bf9 listener name \u7684\u914d\u7f6e\u6ca1\u6709\u8bbe\u7f6e\uff0c\u4f1a\u9000\u5316\u5230\u901a\u5e38\u7684\u8bbe\u7f6e(\u5373 ssl.keystore.location )\u3002 sasl: \u5bf9\u4e8e SASL\uff0c\u4e00\u4e9b\u914d\u7f6e\u662f\u901a\u8fc7 JAAS \u6587\u4ef6\u63d0\u4f9b\u7684\uff0cJAAS \u6587\u4ef6\u662f\u7531 1 \u4e2a\u6216\u591a\u4e2a entries \u7ec4\u6210\u3002 \u5bf9\u4e8e CLIENT listener\uff0cbroker \u4f1a\u4f18\u5148\u627e\u4ee5 client.KafkaServer \u4e3a entry name \u7684 entry\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0cbroker \u4f1a\u627e entry name \u4e3a KafkaServer \u7684 entry\u3002","title":"listener name \u7ea7\u522b\u7684\u914d\u7f6e"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/2-JAAS-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","text":"5.2 JAAS Login Configuration File <entry name> { <LoginModule> <flag> <LoginModule options>; <LoginModule> <flag> <LoginModule options>; . . . }; <entry name> { <LoginModule> <flag> <LoginModule options>; <LoginModule> <flag> <LoginModule options>; . . . }; LoginModule LoginModule \u9700\u8981\u5b9e\u73b0 javax.security.auth.spi.LoginModule \u63a5\u53e3\uff0c\u51b3\u5b9a\u4e86\u8be5 entry \u901a\u8fc7\u4f55\u79cd\u65b9\u5f0f\u8ba4\u8bc1\u3002 \u4e00\u4e2a entry \u4e2d\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2a LoginModule \uff0c\u8ba4\u8bc1\u6d41\u7a0b\u4f1a\u6309\u7167\u987a\u5e8f\u4f9d\u6b21\u6267\u884c LoginModule Flag javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag required: \u5bf9\u5e94\u7684 LoginModule \u5bf9\u8c61\u5fc5\u987b\u88ab\u8c03\u7528\uff0c\u4e14\u901a\u8fc7\u9a8c\u8bc1 requisite sufficient optional LoginModule Options \u53ef\u4ee5\u5305\u542b\u591a\u4e2a key=value \u5f62\u5f0f\u7684\u989d\u5916\u914d\u7f6e \u53c2\u8003 https://www.jianshu.com/p/4585ce68b2ab https://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/Configuration.html","title":"5.2 JAAS \u914d\u7f6e\u6587\u4ef6\u89c4\u5219"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/2-JAAS-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/#52-jaas-login-configuration-file","text":"<entry name> { <LoginModule> <flag> <LoginModule options>; <LoginModule> <flag> <LoginModule options>; . . . }; <entry name> { <LoginModule> <flag> <LoginModule options>; <LoginModule> <flag> <LoginModule options>; . . . };","title":"5.2 JAAS Login Configuration File"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/2-JAAS-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/#loginmodule","text":"LoginModule \u9700\u8981\u5b9e\u73b0 javax.security.auth.spi.LoginModule \u63a5\u53e3\uff0c\u51b3\u5b9a\u4e86\u8be5 entry \u901a\u8fc7\u4f55\u79cd\u65b9\u5f0f\u8ba4\u8bc1\u3002 \u4e00\u4e2a entry \u4e2d\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2a LoginModule \uff0c\u8ba4\u8bc1\u6d41\u7a0b\u4f1a\u6309\u7167\u987a\u5e8f\u4f9d\u6b21\u6267\u884c LoginModule","title":"LoginModule"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/2-JAAS-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/#flag","text":"javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag required: \u5bf9\u5e94\u7684 LoginModule \u5bf9\u8c61\u5fc5\u987b\u88ab\u8c03\u7528\uff0c\u4e14\u901a\u8fc7\u9a8c\u8bc1 requisite sufficient optional","title":"Flag"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/2-JAAS-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/#loginmodule-options","text":"\u53ef\u4ee5\u5305\u542b\u591a\u4e2a key=value \u5f62\u5f0f\u7684\u989d\u5916\u914d\u7f6e","title":"LoginModule Options"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/2-JAAS-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/#_1","text":"https://www.jianshu.com/p/4585ce68b2ab https://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/Configuration.html","title":"\u53c2\u8003"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/3-SASL%20%E7%9B%91%E5%90%AC%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%9C%BA%E5%88%B6/","text":"5.3 SASL \u76d1\u542c\u652f\u6301\u591a\u79cd\u673a\u5236 \u540c\u4e00\u4e2a SASL_PLAINTEXT/SASL_SSL \u7684\u76d1\u542c\u652f\u6301\u591a\u79cd\u673a\u5236 kafka sasl \u652f\u6301\u591a\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u540c\u65f6\u5f00\u542f\uff1a sasl.enabled.mechanisms = PLAIN,SCRAM-SHA-256,SCRAM-SHA-512 \u540c\u65f6\u53ef\u4ee5\u9488\u5bf9 listener_name \u548c sasl mechanisms \u8fdb\u884c\u4e0d\u540c\u914d\u7f6e\u3002 \u8fd9\u91cc\u5728 kafka_server_jaas.conf \u4e2d\u9488\u5bf9 SASL_CLIENT \u4e0e EXT_CLIENT \u5206\u522b\u8fdb\u884c\u914d\u7f6e\uff1a sasl_client.KafkaServer { org.apache.kafka.common.security.scram.ScramLoginModule sufficient username=\"admin\" password=\"admin_pass\"; org.apache.kafka.common.security.plain.PlainLoginModule sufficient username=\"admin\" password=\"admin_pass\" user_admin=\"admin_pass\"; }; ext_client.KafkaServer { org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\"; }; client \u901a\u8fc7 SASL_CLIENT \u8bbf\u95ee broker \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 3 \u79cd\u673a\u5236 bootstrap.servers = 127.0.0.1:9093 security.protocol = SASL_PLAINTEXT sasl.mechanism = PLAIN # sasl.mechanism=SCRAM-SHA-256 # sasl.mechanism=SCRAM-SHA-512 java.security.auth.login.config = ./config/kafka_client_jaas.conf KafkaClient { org.apache.kafka.common.security.plain.PlainLoginModule sufficient username=\"admin\" password=\"password\"; // org.apache.kafka.common.security.scram.ScramLoginModule sufficient // username=\"admin\" // password=\"admin_pass\"; };","title":"5.3 SASL \u76d1\u542c\u652f\u6301\u591a\u79cd\u673a\u5236"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/3-SASL%20%E7%9B%91%E5%90%AC%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%9C%BA%E5%88%B6/#53-sasl","text":"","title":"5.3 SASL \u76d1\u542c\u652f\u6301\u591a\u79cd\u673a\u5236"},{"location":"5-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/3-SASL%20%E7%9B%91%E5%90%AC%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%9C%BA%E5%88%B6/#sasl_plaintextsasl_ssl","text":"kafka sasl \u652f\u6301\u591a\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u540c\u65f6\u5f00\u542f\uff1a sasl.enabled.mechanisms = PLAIN,SCRAM-SHA-256,SCRAM-SHA-512 \u540c\u65f6\u53ef\u4ee5\u9488\u5bf9 listener_name \u548c sasl mechanisms \u8fdb\u884c\u4e0d\u540c\u914d\u7f6e\u3002 \u8fd9\u91cc\u5728 kafka_server_jaas.conf \u4e2d\u9488\u5bf9 SASL_CLIENT \u4e0e EXT_CLIENT \u5206\u522b\u8fdb\u884c\u914d\u7f6e\uff1a sasl_client.KafkaServer { org.apache.kafka.common.security.scram.ScramLoginModule sufficient username=\"admin\" password=\"admin_pass\"; org.apache.kafka.common.security.plain.PlainLoginModule sufficient username=\"admin\" password=\"admin_pass\" user_admin=\"admin_pass\"; }; ext_client.KafkaServer { org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"password\"; }; client \u901a\u8fc7 SASL_CLIENT \u8bbf\u95ee broker \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 3 \u79cd\u673a\u5236 bootstrap.servers = 127.0.0.1:9093 security.protocol = SASL_PLAINTEXT sasl.mechanism = PLAIN # sasl.mechanism=SCRAM-SHA-256 # sasl.mechanism=SCRAM-SHA-512 java.security.auth.login.config = ./config/kafka_client_jaas.conf KafkaClient { org.apache.kafka.common.security.plain.PlainLoginModule sufficient username=\"admin\" password=\"password\"; // org.apache.kafka.common.security.scram.ScramLoginModule sufficient // username=\"admin\" // password=\"admin_pass\"; };","title":"\u540c\u4e00\u4e2a SASL_PLAINTEXT/SASL_SSL \u7684\u76d1\u542c\u652f\u6301\u591a\u79cd\u673a\u5236"},{"location":"6-zookeeper%20%E8%AE%A4%E8%AF%81%E6%94%AF%E6%8C%81/","text":"6 zookeeper \u8ba4\u8bc1\u652f\u6301 \u521b\u5efa JAAS login file \u521b\u5efa conf/zookeeper_server_jaas.conf \u6587\u4ef6\uff0c\u914d\u7f6e\u7528\u6237\u540d\u548c\u5bc6\u7801\uff1a Server { org.apache.zookeeper.server.auth.DigestLoginModule required user_admin=\"password\" user_alice=\"password\"; }; \u8fd0\u884c zookeeper \u65f6\u9700\u8981\u5c06 jaas \u6587\u4ef6\u8def\u5f84\u52a0\u5165\u5230 JVM \u53c2\u6570\u4e2d\uff0c\u53ef\u4ee5\u5728 conf/zookeeper-env.sh \u4e2d\u589e\u52a0\uff1a export SERVER_JVMFLAGS = \"-Djava.security.auth.login.config=/usr/local/zookeeper/conf/zookeeper_server_jaas.conf\" zoo.cfg authProvider.1 = org.apache.zookeeper.server.auth.SASLAuthenticationProvider requireClientAuthScheme = sasl jaasLoginRenew = 3600000 zkCli \u8bbf\u95ee \u5ba2\u6237\u7aef\u901a\u8fc7 SASL \u8ba4\u8bc1\u8bbf\u95ee\uff0c\u521b\u5efa conf/zookeeper_client_jaas.conf \u6587\u4ef6\uff1a Client { org.apache.zookeeper.server.auth.DigestLoginModule required username=\"admin\" password=\"password\"; }; \u8fd0\u884c client \u65f6\u9700\u8981\u5c06 jaas \u6587\u4ef6\u8def\u5f84\u52a0\u5165\u5230 JVM \u53c2\u6570\u4e2d\uff0c\u53ef\u4ee5\u5728 conf/zookeeper-env.sh \u4e2d\u589e\u52a0\uff1a export CLIENT_JVMFLAGS = \"-Djava.security.auth.login.config=/usr/local/zookeeper/conf/zookeeper_client_jaas.conf\" kafka \u8bbf\u95ee \u589e\u52a0 jaas \u6587\u4ef6\uff0c\u5982 kafka_server_jaas.conf \uff0c\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a Client { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"admin\" password=\"password\"; }; \u8fd0\u884c kafka \u65f6\u9700\u8981\u5c06 jaas \u6587\u4ef6\u9732\u80a9\u52a0\u5165\u5230 JVM \u53c2\u6570\u4e2d \u5728\u521b\u5efa znode \u65f6\u5f00\u542f ACL zookeeper.set.acl = true acl \u64cd\u4f5c \u8bbe\u7f6e acl [zk: localhost:2181(CONNECTED) 6] setAcl /brokers sasl:bcekafka:rwcda,world:anyone:r \u67e5\u770b acl [zk: localhost:2181(CONNECTED) 7] getAcl /brokers 'sasl,'bcekafka : cdrwa 'world,'anyone : r","title":"6. zookeeper \u8ba4\u8bc1\u652f\u6301"},{"location":"6-zookeeper%20%E8%AE%A4%E8%AF%81%E6%94%AF%E6%8C%81/#6-zookeeper","text":"","title":"6 zookeeper \u8ba4\u8bc1\u652f\u6301"},{"location":"6-zookeeper%20%E8%AE%A4%E8%AF%81%E6%94%AF%E6%8C%81/#jaas-login-file","text":"\u521b\u5efa conf/zookeeper_server_jaas.conf \u6587\u4ef6\uff0c\u914d\u7f6e\u7528\u6237\u540d\u548c\u5bc6\u7801\uff1a Server { org.apache.zookeeper.server.auth.DigestLoginModule required user_admin=\"password\" user_alice=\"password\"; }; \u8fd0\u884c zookeeper \u65f6\u9700\u8981\u5c06 jaas \u6587\u4ef6\u8def\u5f84\u52a0\u5165\u5230 JVM \u53c2\u6570\u4e2d\uff0c\u53ef\u4ee5\u5728 conf/zookeeper-env.sh \u4e2d\u589e\u52a0\uff1a export SERVER_JVMFLAGS = \"-Djava.security.auth.login.config=/usr/local/zookeeper/conf/zookeeper_server_jaas.conf\"","title":"\u521b\u5efa JAAS login file"},{"location":"6-zookeeper%20%E8%AE%A4%E8%AF%81%E6%94%AF%E6%8C%81/#zoocfg","text":"authProvider.1 = org.apache.zookeeper.server.auth.SASLAuthenticationProvider requireClientAuthScheme = sasl jaasLoginRenew = 3600000","title":"zoo.cfg"},{"location":"6-zookeeper%20%E8%AE%A4%E8%AF%81%E6%94%AF%E6%8C%81/#zkcli","text":"\u5ba2\u6237\u7aef\u901a\u8fc7 SASL \u8ba4\u8bc1\u8bbf\u95ee\uff0c\u521b\u5efa conf/zookeeper_client_jaas.conf \u6587\u4ef6\uff1a Client { org.apache.zookeeper.server.auth.DigestLoginModule required username=\"admin\" password=\"password\"; }; \u8fd0\u884c client \u65f6\u9700\u8981\u5c06 jaas \u6587\u4ef6\u8def\u5f84\u52a0\u5165\u5230 JVM \u53c2\u6570\u4e2d\uff0c\u53ef\u4ee5\u5728 conf/zookeeper-env.sh \u4e2d\u589e\u52a0\uff1a export CLIENT_JVMFLAGS = \"-Djava.security.auth.login.config=/usr/local/zookeeper/conf/zookeeper_client_jaas.conf\"","title":"zkCli \u8bbf\u95ee"},{"location":"6-zookeeper%20%E8%AE%A4%E8%AF%81%E6%94%AF%E6%8C%81/#kafka","text":"\u589e\u52a0 jaas \u6587\u4ef6\uff0c\u5982 kafka_server_jaas.conf \uff0c\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a Client { org.apache.kafka.common.security.plain.PlainLoginModule required username=\"admin\" password=\"password\"; }; \u8fd0\u884c kafka \u65f6\u9700\u8981\u5c06 jaas \u6587\u4ef6\u9732\u80a9\u52a0\u5165\u5230 JVM \u53c2\u6570\u4e2d \u5728\u521b\u5efa znode \u65f6\u5f00\u542f ACL zookeeper.set.acl = true","title":"kafka \u8bbf\u95ee"},{"location":"6-zookeeper%20%E8%AE%A4%E8%AF%81%E6%94%AF%E6%8C%81/#acl","text":"\u8bbe\u7f6e acl [zk: localhost:2181(CONNECTED) 6] setAcl /brokers sasl:bcekafka:rwcda,world:anyone:r \u67e5\u770b acl [zk: localhost:2181(CONNECTED) 7] getAcl /brokers 'sasl,'bcekafka : cdrwa 'world,'anyone : r","title":"acl \u64cd\u4f5c"}]}